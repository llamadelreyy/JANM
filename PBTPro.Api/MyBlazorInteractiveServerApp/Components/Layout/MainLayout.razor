@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            <DxGridLayoutRow Areas="sidebar header" Height="auto"></DxGridLayoutRow>
            <DxGridLayoutRow Areas="sidebar content"></DxGridLayoutRow>
        </Rows>
        <Columns>
            <DxGridLayoutColumn Width="auto" />
            <DxGridLayoutColumn />
        </Columns>
        <Items>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-sidebar">
                <Template>
                    <NavMenu />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="content px-4">
                <Template>
                    <div class="w-100 nav-buttons-container">
                        <NavLink id="menu-top" class="button-link hidden" onclick="(document.getElementById('sidebar').classList.toggle('auto-expanded'), document.getElementById('menu-top').classList.toggle('hidden'))">
                            <DxButton RenderStyle="@ButtonRenderStyle.Dark" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button" IconCssClass="icon icon-menu"></DxButton>
                        </NavLink>
                        @if(!string.IsNullOrEmpty(NavigationManager.ToBaseRelativePath(NavigationManager.Uri))) {
                            <NavLink href="/" class="button-link">
                                <DxButton RenderStyle="@ButtonRenderStyle.Dark" Text="Back to Home" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button" IconCssClass="icon icon-back"></DxButton>
                            </NavLink>
                        }
                    </div>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>
