@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using PBTPro.Pages
@inject PBTAuthStateProvider PBTAuthStateProvider
@* @using Blazored.Toast.Configuration *@

<HeadContent>
    @foreach (var item in _activeTheme.StylesheetLinkUrl)
    {
        <link href="@item" rel="stylesheet" />
    }
</HeadContent>

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
    MaxToastCount="5"
    AnimationType="ToastAnimationType.Slide"
    HorizontalAlignment="HorizontalAlignment.Center"
    VerticalAlignment="VerticalEdge.Bottom"
    Width="50%" />
</div>

<DxLayoutBreakpoint MaxWidth="1200"
@bind-IsActive="@IsMobileLayout" />


<div class="page">
    <DxLoadingPanel @bind-Visible="PanelVisible"
    IsContentBlocked="true"
    ApplyBackgroundShading="true"
    IndicatorAreaVisible="false"
    Text="Membenarkan akses...">

        <DxGridLayout CssClass="page-layout">
            <Rows>
                @if(IsMobileLayout) {
                    <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                    <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                    <DxGridLayoutRow Areas="content" />
                }
                else {
                    <DxGridLayoutRow Areas="header header" Height="auto" />
                    <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
                }
            </Rows>
            <Columns>
                @if(!IsMobileLayout) {
                    <DxGridLayoutColumn Width="auto" />
                    <DxGridLayoutColumn />
                }
            </Columns>
            <Items>
                <DxGridLayoutItem Area="header">
                    <Template>
                        <Header @bind-ToggleOn="@IsSidebarExpanded" />
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="0" Column="1">
                    <Template>
                        <ThemeSwitcherToggleButton @bind-Active=@_themeSwitcherShown />
                        <div id="settingsbar" class="@(_themeSwitcherShown ? "" : "hidden-settings-bar")">
                            <ThemeSwitcherSideView @bind-ActiveTheme="@_activeTheme" @bind-Visible="@_themeSwitcherShown" />
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="sidebar">
                    <Template>
                        <NavMenu StateCssClass="@NavMenuCssClass" />
                    </Template>
                </DxGridLayoutItem>

                <DxGridLayoutItem Area="content" @key=@_activeTheme>
                    <Template>
                        @Body
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
    </DxLoadingPanel>

    @*For Popup checking password expired*@
    <DxPopup @bind-Visible="@ExpiredPasswordShown" 
    HeaderText="Katalaluan Tamat Tempoh" 
    Width="auto" 
    CloseOnOutsideClick="false"
    ShowCloseButton="false">
        <BodyContentTemplate>
            <center>
            <br />Kata laluan anda telah tamat tempoh. <br />Sila tetapkan semula kata laluan anda untuk meneruskan akses ke akaun anda.
            <br /><br
            </center>
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnExpiredPwdYesButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>
</div>


@code{
    bool PanelVisible { get; set; }
    bool _themeSwitcherShown = false;
    ThemeItem _activeTheme = ThemeItem.Default;

    bool isMobileMode;

    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout {
        get => _isMobileLayout;
        set {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded {
        get => _isSidebarExpanded;
        set {
            if(_isSidebarExpanded != value) {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    protected override async void OnInitialized()
    {

        PanelVisible = true;
        await Task.Delay(1000);
        NavigationManager.LocationChanged += OnLocationChanged;
        PanelVisible = false;
        validateAccountStatus();
        await InvokeAsync(StateHasChanged);
    }

    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) {
        if(IsMobileLayout) {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
        validateAccountStatus();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    #region Password Expired
    bool ExpiredPasswordShown { get; set; } = false;
    async void validateAccountStatus()
    {
        var CurrentUser = PBTAuthStateProvider.CurrentUser;
        if (CurrentUser.IsPasswordExpired)
        {
            var currrentPath = GetCurrentPath();
            if (!string.Equals(currrentPath, "user_password", StringComparison.OrdinalIgnoreCase) && 
            !string.Equals(currrentPath, "logour", StringComparison.OrdinalIgnoreCase))
            {
                ExpiredPasswordShown = true;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private string GetCurrentPath()
    {
        var fullUrl = NavigationManager.Uri;
        var uri = new Uri(fullUrl);
        return uri.AbsolutePath.TrimStart('/');
    }

    private void OnExpiredPwdYesButtonClick()
    {
        ExpiredPasswordShown = false;
        NavigationManager.NavigateTo("user_password", false);
    }
    #endregion
}



