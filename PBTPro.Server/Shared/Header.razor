@inject IJSRuntime JS

<nav class="navbar header-navbar p-0" style="background-color:inherit;">
    <button class="navbar-toggler bg-primary d-block" @onclick="OnToggleClick">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="reportHeader">
        <div class="leftHeader">PBT Pro - Pendigital Sistem Kerja Pihak Berkuasa Tempatan</div>
        @*        <div class="rightHeader">
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <a href="/profile" style="text-decoration:none;font-size:inherit;font-family:inherit;">Admin</a>&nbsp;[&nbsp;<a href="" @onclick="LogoutAsync" style="text-decoration:none;">Log Keluar</a>&nbsp;]
                    </Authorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
            <a href="/profile" style="text-decoration:none;font-size:inherit;font-family:inherit;">Admin</a>&nbsp;[&nbsp;<a href="" @onclick="LogoutAsync" style="text-decoration:none;">Log Keluar</a>&nbsp;]
            </div>*@
    </div>
</nav>
@*<InfoPanel @bind-Visible="@InfoPanelVisible"></InfoPanel>*@

@code {

    [Parameter] public bool ToggleOn { get; set; }

    int intJob { get; set; } = 0;
    [Parameter] public EventCallback<bool> ToggleOnChanged { get; set; }

    async Task OnToggleClick() => await Toggle();

    async Task Toggle(bool? value = null)
    {
        var newValue = value ?? !ToggleOn;
        if (ToggleOn != newValue)
        {
            ToggleOn = newValue;
            await ToggleOnChanged.InvokeAsync(ToggleOn);
        }
    }


    public async Task LogoutAsync()
    {

    }
}