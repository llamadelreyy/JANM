@using Components

@using PBTPro
@using PBTPro.Pages

@using PBTPro.Data
@using PBTPro.DAL.Models
@using PBTPro.DAL.Models.PayLoads
@using GoogleMapsComponents.Maps
@using Newtonsoft.Json
@using DevExpress.Blazor
@* @using DevExpress.Blazor.Reporting
@using DevExpress.XtraReports.UI;
@using DevExpress.XtraReports.Parameters;
@using Parameter = DevExpress.XtraReports.Parameters.Parameter; *@

@inject IJSRuntime JSRuntime
@inject ApiConnector _ApiConnector // 07/11/2024 - API Fetcher - ismail
@inject PBTAuthStateProvider _PBTAuthStateProvider

<div class="e-card">
    <div class="e-main d-flex align-items-center">
        <div class="e-info flex-grow-1 ms-3 py-3">

            <table class="e-name" style="width:100%;">
                <tr>
                    <td nowrap>No. Cukai</td>
                    <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                    <td style="width:100%;">@($"{(string.IsNullOrEmpty(_dtTax.tax.tax_accno) ? "" : _dtTax.tax.tax_accno)}")</td>
                </tr>
                <tr>
                    <td nowrap>Tarikh Cukai</td>
                    <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                    <td style="width:100%;">@($"{(_dtTax.tax.tax_start_date == null ? "" : _dtTax.tax.tax_start_date)} - {(_dtTax.tax.tax_end_date == null ? "" : _dtTax.tax.tax_end_date)}")</td>
                </tr>
                <tr>
                    <td nowrap>Cukai Taksiran (RM)</td>
                    <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                    <td style="width:100%;">0.00</td>
                </tr>
                <tr>
                    <td colspan="3"><div class="e-divider my-3"></div></td>
                </tr>
                @if (_dtTax.tax_owner != null)
                {
                    <tr>
                        <td nowrap>Nama Pemilik</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(_dtTax.tax_owner.owner_name) ? "" : _dtTax.tax_owner.owner_name)} - ({(string.IsNullOrEmpty(_dtTax.tax_owner.owner_icno) ? "" : _dtTax.tax_owner.owner_icno)})")</td>
                    </tr>
                    <tr>
                        <td nowrap>Alamat Pemilik</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(_dtTax.tax_owner.owner_addr) ? "" : _dtTax.tax_owner.owner_addr)})")</td>
                    </tr>
                    <tr>
                        <td nowrap>Telefon No</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(_dtTax.tax_owner.owner_telno) ? "" : _dtTax.tax_owner.owner_telno)}")</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td nowrap>Nama Pemilik</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">-</td>
                    </tr>
                    <tr>
                        <td nowrap>Alamat Pemilik</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">-</td>
                    </tr>
                    <tr>
                        <td nowrap>Telefon No</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">-</td>
                    </tr>
                }
                <tr>
                    <td colspan="3"><div class="e-divider my-3"></div></td>
                </tr>
                <tr>
                    <td nowrap>Alamat Premis &nbsp;&nbsp; <img src="/images/icons-small/marker.png" alt="" /></td>
                    <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                    <td style="width:100%;">
                        <a class="marker-panel" style="text-decoration:none;cursor:pointer" onclick=@(() => OpenNewStreetWindow(LatLng.Lat.ToString(), LatLng.Lng.ToString()))>
                            @($"{(string.IsNullOrEmpty(_dtTax.tax.alamat) ? "" : _dtTax.tax.alamat)}")
                        </a>
                    </td>
                </tr>
            </table>

            @* <div class="e-status">@GetStatusIconHtml(_dtTax.status_tax_id ?? 0)</div> *@
            <div class="e-divider my-3"></div>
            <div class="e-email">
                <a class="receipt-panel" onclick=@(() => ShowNotis("Notis", (string.IsNullOrEmpty(_dtTax.tax.tax_accno) ? "" : _dtTax.tax.tax_accno)))>
                    <img src="/images/icons-small/script-text.png" alt="" />
                    Notis
                    <span class="@(_taxNotice == 0 ? "badge-button-green" : "badge-button-red")">@_taxNotice</span>
                </a>

                <a class="receipt-panel" onclick=@(() => ShowCompound("Kompaun", (string.IsNullOrEmpty(_dtTax.tax.tax_accno) ? "" : _dtTax.tax.tax_accno)))>
                    <img src="/images/icons-small/receipt-text.png" alt="" />
                    Kompaun
                    <span class="@(_taxCompound == 0 ? "badge-button-green" : "badge-button-red")">@_taxCompound</span>
                </a>

                <a class="receipt-panel" onclick=@(() => ShowConfiscation("Sitaan", (string.IsNullOrEmpty(_dtTax.tax.tax_accno) ? "" : _dtTax.tax.tax_accno)))>
                    <img src="/images/icons-small/box.png" alt="" />
                    Sitaan
                    <span class="@(_taxConfiscation == 0 ? "badge-button-green" : "badge-button-red")">@_taxConfiscation</span>
                </a>

                <a class="receipt-panel" onclick=@(() => ShowInspection("Nota Pemeriksaan", (string.IsNullOrEmpty(_dtTax.tax.tax_accno) ? "" : _dtTax.tax.tax_accno)))>
                    <img src="/images/icons-small/document-task.png" alt="" />
                    Nota Pemeriksaan
                    <span class="@(_taxInspection == 0 ? "badge-button-green" : "badge-button-red")">@_taxInspection</span>
                </a>
            </div>
@*             <div class="e-divider my-3"></div>
            <div class="e-email">
                <button class="btn-panel" type="button" onclick=@(() => ShowReportCukai())>Maklumat Cukai</button>
                <button class="btn-panel">
                Nota Pemeriksaan
                <span class="badge-button-green">0</span>
                </button>
            </div> *@
        </div>
    </div>
</div>


@* <DxPopup HeaderText="@HeaderText" @bind-Visible="@PopupVisible">
    <Content>
        <div class="e-name" style="align-items:end;right:200px;font-size:0.75rem;">Bil. Rekod : @_totalRec</div>
        <DxListBox Data="@_dtDataTaburan"
                   @bind-Value="@_valueTaburan"
                   CssClass="cw-800 ch-600">
            <ItemDisplayTemplate>
                <div class="listbox-item-template" style="border:1px solid #ccc;">
                    <div class="listbox-item-template-text">

                        <span class="listbox-item-template-text-phone e-name">Ref. No. : @context.DataItem.ref_no</span>
                        <span class="listbox-item-template-text-phone e-name">Status : @context.DataItem.trnstatus_view</span>
                        <span class="listbox-item-template-text-phone e-name">Dokumen : <a href="@context.DataItem.doc_pathurl" target="_blank">@context.DataItem.doc_name</a></span>
                        <span class="listbox-item-template-text-phone e-name">Tarikh : @context.DataItem.created_at</span>

                    </div>
                </div>
            </ItemDisplayTemplate>
        </DxListBox>


    </Content>
</DxPopup> *@

<DxWindow @ref=windowRef
AllowResize="true"
ShowCloseButton="true"
CloseOnEscape="true"
HeaderText=@HeaderText
FooterText="Footer"
ShowFooter="true"
Width="max(80vw, 800px)"
MinWidth="800"
MinHeight="500"
MaxWidth="800"
MaxHeight="500"
@bind-Visible=PopupVisible>
    <BodyContentTemplate>
        <DxGrid @ref="Grid"
        Data="_dtDataTaburan"
        KeyFieldName="trn_id"
        ShowGroupPanel="false"
        ShowFilterRow="false"
        TextWrapEnabled="true"
        CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
        EditorRenderMode="GridEditorRenderMode.Integrated"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Never"
        ShowSearchBox="true"
        SearchBoxNullText="Masukkan kata carian..."
        AllowSelectRowByClick="true"
        @bind-SearchText="@GridSearchText"
        PageSize="25"
        @bind-PageIndex="@GridPageIndex"
        PagerPosition="GridPagerPosition.Bottom"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        EditFormButtonsVisible="false"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PagerAutoHideNavButtons="false"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        CustomizeElement="Grid_CustomizeElement"
        GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
        HighlightRowOnHover="true"
        CssClass="mv-600">

            <Columns>
                <DxGridDataColumn Caption="Ref. No" MinWidth="120" Width="20%" FieldName="ref_no" />
                <DxGridDataColumn Caption="Status" MinWidth="180" Width="25%" FieldName="trnstatus_view" />
                <DxGridDataColumn FieldName="doc_name" AllowSort="false" Width="40%" MinWidth="250" TextAlignment="GridTextAlignment.Left">
                    <CellDisplayTemplate Context="displayContext">
                        @*  <a class="d-block text-left" href="javascript:;" @onclick="() => ShowDetails(displayContext)">@(((taburan_view)displayContext.DataItem).doc_name)</a> *@
                        <a href="@(((taburan_view)displayContext.DataItem).doc_pathurl)" target="_blank">@(((taburan_view)displayContext.DataItem).doc_name)</a>
                    </CellDisplayTemplate>
                    <HeaderCaptionTemplate Context="header_name"><span title="Klik pada nama dokumen untuk paparan dokumen">Dokumen</span></HeaderCaptionTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="created_at"
                DisplayFormat="dd/MM/yyyy"
                Caption="Tarikh Data"
                MinWidth="100"
                Width="15%"
                TextAlignment="GridTextAlignment.Center"
                SortOrder="GridColumnSortOrder.Ascending"
                SortIndex="0"/>
            </Columns>
            @*This is to count the summary*@
            <TotalSummary>
                <DxGridSummaryItem FooterColumnName="ref_no"
                Name="Custom"
                SummaryType=GridSummaryItemType.Count />
            </TotalSummary>

        </DxGrid>
    </BodyContentTemplate>
    <FooterContentTemplate>
        @*         <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@context.CloseCallback" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@context.CloseCallback" /> *@
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Tutup" Click="@context.CloseCallback" />
    </FooterContentTemplate>
</DxWindow>

@* <DxWindow @ref=windowPrint
Style="position: absolute; left: 0; top: 0; width: 100vw; height: 100vh;"
AllowResize="true"
ShowCloseButton="true"
CloseOnEscape="true"
HeaderText=@HeaderText
FooterText="Footer"
ShowFooter="true"
@bind-Visible=PopupPrintVisible>
    <BodyContentTemplate>
        <div style="width: 100%; height: calc(100% - 4rem);">
            <DxReportViewer @ref="reportViewer" Report="@Report" SizeMode="SizeMode.Small" CssClass="Width:100%">
            </DxReportViewer>
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Tutup" Click="@context.CloseCallback" />
    </FooterContentTemplate>
</DxWindow> *@

@code {
    [Parameter] public premis_license_tax_view _dtTax { get; set; }
    [Parameter] public LatLngLiteral? LatLng { get; set; }

    List<taburan_view> _dtDataTaburan { get; set; }
    taburan_view _valueTaburan { get; set; }

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    DxWindow windowRef;
    // DxWindow windowPrint;
    ElementReference popupTarget;

    // DxReportViewer? reportViewer { get; set; }
    // XtraReport? Report { get; set; }

    bool PopupVisible { get; set; } = false;
    // bool PopupPrintVisible { get; set; } = false;
    string HeaderText = string.Empty;
    int _totalRec = 0;
    int _taxInspection = 0;
    int _taxConfiscation = 0;
    int _taxNotice = 0;
    int _taxCompound = 0;

    // async Task TogglePopupVisibilityAsync()
    // {
    //     if (PopupVisible)
    //         await windowRef.CloseAsync();
    //     else
    //         await windowRef.ShowAtAsync(popupTarget);
    // }

    // async Task ShowReportCukai()
    // {
    //     Report = new Reports.ViewNotis();
    //     await windowPrint.ShowAsync();
    //     PopupPrintVisible = true;
    // }

    async Task ShowNotis(string headerdtl, string _accNo)
    {
        _dtDataTaburan = new List<taburan_view>();
        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Notices/GetNoticeListByTaxAccNo/{_accNo}";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var noticeRoot = JsonConvert.DeserializeObject<List<NoticeRoot>>(dataString);
                var result = new NoticeRoot();
                result = noticeRoot.FirstOrDefault();
                _totalRec = result.total_records;

                foreach (var _dt in result.notice_lists)
                {

                    taburan_view _notice = new taburan_view
                        {
                            trn_id = _dt.trn_notice_id,
                            ref_no = string.IsNullOrEmpty(_dt.notice_ref_no) ? "" : _dt.notice_ref_no,
                            section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                            act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                            doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                            doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                            trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                            created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                        };

                    _dtDataTaburan.Add(_notice);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    async Task ShowCompound(string headerdtl, string _accNo)
    {
        _dtDataTaburan = new List<taburan_view>();
        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Compounds/GetCompoundListByTaxAccNo/{_accNo}";
        // string requestUrl = $"/api/Compounds/GetCompoundListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var cmpdRoot = JsonConvert.DeserializeObject<List<CompoundRoot>>(dataString);
                var result = new CompoundRoot();
                result = cmpdRoot.FirstOrDefault();
                
                _totalRec = result.total_records;

                foreach (var _dt in result.compound_lists)
                {

                    taburan_view _compound = new taburan_view
                        {
                            trn_id = _dt.trn_cmpd_id,
                            ref_no = string.IsNullOrEmpty(_dt.cmpd_ref_no) ? "" : _dt.cmpd_ref_no,
                            section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                            act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                            doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                            doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                            trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                            created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                        };

                    _dtDataTaburan.Add(_compound);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    async Task ShowConfiscation(string headerdtl, string _accNo)
    {
        _dtDataTaburan = new List<taburan_view>();
        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Confiscations/GetConfiscationListByTaxAccNo/{_accNo}";
        // string requestUrl = $"/api/Confiscations/GetConfiscationListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var confiscationRoot = JsonConvert.DeserializeObject<List<ConfiscationRoot>>(dataString);
                var result = new ConfiscationRoot();
                result = confiscationRoot.FirstOrDefault();
                _totalRec = result.total_records;

                foreach (var _dt in result.confiscation_lists)
                {

                    taburan_view _confiscation = new taburan_view
                        {
                            trn_id = _dt.trn_cfsc_id,
                            ref_no = string.IsNullOrEmpty(_dt.cfsc_ref_no) ? "" : _dt.cfsc_ref_no,
                            section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                            act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                            doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                            doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                            trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                            created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                        };

                    _dtDataTaburan.Add(_confiscation);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    async Task ShowInspection(string headerdtl, string _accNo)
    {
        _dtDataTaburan = new List<taburan_view>();
        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Inspections/GetInspectionListByTaxAccNo/{_accNo}";
        // string requestUrl = $"/api/Inspections/GetInspectionListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var inspectionRoot = JsonConvert.DeserializeObject<List<InspectionRoot>>(dataString);
                var result = new InspectionRoot();
                result = inspectionRoot.FirstOrDefault();
                _totalRec = result.total_records;

                foreach (var _dt in result.inspection_lists)
                {

                    taburan_view _inspection = new taburan_view
                        {
                            trn_id = _dt.trn_inspect_id,
                            ref_no = string.IsNullOrEmpty(_dt.inspect_ref_no) ? "" : _dt.inspect_ref_no,
                            section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                            act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                            doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                            doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                            trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                            created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                        };

                    _dtDataTaburan.Add(_inspection);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    protected override async Task OnInitializedAsync()
    {

        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Taxholder/GetTicketCountByTaxAccNo/{_dtTax.tax.tax_accno}";
        var _returnData = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (_returnData.ReturnCode == 200)
        {
            string? dataString = _returnData?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var tasks = new List<Task>();
                dynamic _dtTicket = JsonConvert.DeserializeObject(dataString);

                _taxInspection = _dtTicket.inspection;
                _taxConfiscation = _dtTicket.confiscation;
                _taxNotice = _dtTicket.notice;
                _taxCompound = _dtTicket.compound;
            }
        }
    }


    public async Task OpenNewStreetWindow(string latitude, string longitude)
    {
        await JSRuntime.InvokeVoidAsync("open", "http://maps.google.com/maps?q=&layer=c&cbll=" + latitude + "," + longitude + "&cbp=11,0,0,0,0", "_blank");
    }

    // public async Task ShowDetails(int trnId)
    // {
    //     _valueTaburan = _dtDataTaburan.FirstOrDefault(e => e.trn_id == trnId);

    //     if (_valueTaburan != null)
    //         await JSRuntime.InvokeVoidAsync("open", _valueTaburan.doc_pathurl , "_blank");
    // }

    // public async Task ShowDetails(GridDataColumnCellDisplayTemplateContext context)
    // {
    //     _valueTaburan = (taburan_view)context.DataItem;
    //     await JSRuntime.InvokeVoidAsync("open", _valueTaburan.doc_pathurl, "_blank");
    // }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.SearchBoxContainer)
        {
            e.Style = "Width: 100%";
        }
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    public MarkupString GetStatusIconHtml(int status_id)
    {
        string priorytyClass = "nodata";
        string title = " TIADA DATA ";
        if (status_id == 1)
        {
            priorytyClass = "aktif";
            title = " LESEN AKTIF ";
        }
        else if (status_id == 5)
        {
            priorytyClass = "danger";
            title = " TIDAK BERLESEN ";
        }
        else if (status_id == 3)
        {
            priorytyClass = "gantung";
            title = " LESEN GANTUNG ";
        }

        string html = string.Format("<span class='e-badge e-priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass, title);
        return new MarkupString(html);

    }

}