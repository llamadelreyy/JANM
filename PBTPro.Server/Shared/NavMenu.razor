@using PBTPro.DAL.Services
@using PBTPro.Data
@inject PBTAuthStateProvider PBTAuthStateProvider
@inject MenuService _MenuService

<div class="sidebar @StateCssClass">
    <!-- Sidebar Header-->
    <AuthorizeView>
        <Authorized>
            <div class="sidebar-header d-flex align-items-center pt-3 px-3 pb-3" style="border-bottom:solid 1px #ccc;">


                @*<img class="avatar shadow-0 img-fluid rounded-circle" src="https://d19m59y37dris4.cloudfront.net/admin/2-2-0/img/avatar-1.ce912d90.jpg" alt="...">*@
                <a href="" class="avatar-text online"><span class="avatar-text-initial">@GetInitial(PBTAuthStateProvider.CurrentUser.Fullname)</span></a>
                <div class="ms-3 title">
                    <span class="loginuser mb-2">@PBTAuthStateProvider.CurrentUser.Fullname </span> [ <a href="user_profile" alt="ubah profail"><i class="ri-edit-2-line ri-1x"></i></a> | <a href="reset_password" alt="ubah profail"><i class="ri-lock-password-line ri-1x"></i></a> ]
                    <p class="text-sm text-gray-500 fw-light mb-0 lh-1">
                        <span class="loginusername">@string.Join(", ", PBTAuthStateProvider.CurrentUser.Roles)</span> [ <a alt="logout" href="/logout"><i class="ri-logout-box-r-line ri-1x"></i></a>]
                    </p>
                </div>

                @*             <NotAuthorized>
                        <div class="ms-3 title">
                            Pengguna Umum <a alt="login" href="/login"><i class="ri-login-box-line ri-1x"></i></a>
                        </div>
                    </NotAuthorized> *@

            </div>
        </Authorized>
    </AuthorizeView> 
    <DxTreeView AllowSelectNodes="true" CssClass="app-sidebar" style="padding-top:15px;">
        <Nodes>
            @RenderMenus(Menus)
        </Nodes>
    </DxTreeView>
</div>


@code {
    const string rootNodeCssClass = "root-item";
    [Parameter] public string? StateCssClass { get; set; }
    IEnumerable<MenuViewItem> Menus;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(300);
        await _MenuService.ReInitializeAsync();
        Menus = await _MenuService.GetItemByAuth();
    }

    string GetInitial(string userName)
    {
        string[] words = userName.Split(' ');
        int count = 0;
        int intStrLength = 1;
        string initialUserName = "";

        if (words.Length > 1)
            intStrLength = 2;

        foreach (string word in words) 
        { 
            if (word.Length > 0 && count < intStrLength)
            { 
                initialUserName = word[0].ToString();
                count++; 
            } 
        }

        return initialUserName;
    }

    private RenderFragment RenderMenus(IEnumerable<MenuViewItem> menus) => builder =>
    {
        if (menus != null && menus.Any())
        {
            foreach (var menu in menus)
            {
                builder.OpenComponent<DxTreeViewNode>(0);
                builder.AddAttribute(1, "Text", menu.Text);
                builder.AddAttribute(2, "NavigateUrl", menu.NavigateUrl);
                builder.AddAttribute(3, "IconUrl", menu.IconUrl);
                builder.AddAttribute(4, "CssClass", !menu.SubMenu.Any() ? "singleNodesClass" : rootNodeCssClass);
                if (menu.BadgeText.HasValue)
                {
                    builder.AddAttribute(5, "BadgeText", menu.BadgeText);
                }

                if (menu.SubMenu.Any())
                {
                    builder.AddAttribute(6, "Nodes", (RenderFragment)(nestedBuilder =>
                    {
                        RenderMenus(menu.SubMenu)(nestedBuilder);
                    }));
                }

                builder.CloseComponent();
            }
        }
    };

}
