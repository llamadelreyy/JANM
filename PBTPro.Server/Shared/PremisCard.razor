@using Components
@using PBTPro.Data
@using PBTPro.DAL.Models
@using PBTPro.DAL.Models.PayLoads
@using GoogleMapsComponents.Maps
@using Newtonsoft.Json

@inject IJSRuntime JSRuntime
@inject ApiConnector _ApiConnector // 07/11/2024 - API Fetcher - ismail
@inject PBTAuthStateProvider _PBTAuthStateProvider

<div class="e-lesen-title"><span class="px-3"><img src="/images/icons/document-text-image.png" alt="" /><span class="px-1">Info Lesen</span></span></div>
<div class="e-card">
    <div class="e-main d-flex align-items-center">
        <div class="e-info flex-grow-1 ms-3 py-3">

            @if (PremisInfo.license != null)
            {

                <table class="e-name" style="width:100%;">
                    <tr>
                        <td nowrap>No. Lot</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{PremisInfo.license.lot}")</td>
                    </tr>
                    <tr>
                        <td nowrap>No. SSM</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license.ssm_no) ? "" : PremisInfo.license.ssm_no)}")</td>
                    </tr>
                    <tr>
                        <td nowrap>No. Lesen</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license.license_accno) ? "" : PremisInfo.license.license_accno)}")</td>
                    </tr>
                    <tr>
                        <td nowrap>Tempoh Lesen</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license.license_duration) ? "" : PremisInfo.license.license_duration)} ({(PremisInfo.license.start_date == null ? "" : PremisInfo.license.start_date)} - {(PremisInfo.license.end_date == null ? "" : PremisInfo.license.end_date)})")</td>
                    </tr>
                    <tr>
                        <td nowrap>Jumlah (RM)</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@(PremisInfo.license.total_amount != null ? PremisInfo.license.total_amount : "0.00")</td>
                    </tr>
                    <tr>
                        <td nowrap>Nama Perniagaan</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license.business_name) ? "" : PremisInfo.license.business_name)}")</td>
                    </tr>
                    <tr>
                        <td nowrap>Alamat</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license.business_addr) ? "" : PremisInfo.license.business_addr)}")
@*                             <a class="marker-panel" style="text-decoration:none;cursor:pointer" onclick=@(() => OpenNewStreetWindow(LatLng.ToString(), LatLng.ToString()))>
                                @($"{PremisInfo.license.business_addr}")
                            </a> *@
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3"><div class="e-divider my-3"></div></td>
                    </tr>
                    <tr>
                        <td nowrap>Pemegang Lesen</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license_owner?.owner_name) ? "" : PremisInfo.license_owner?.owner_name)} - ({(string.IsNullOrEmpty(PremisInfo.license_owner?.owner_icno) ? "" : PremisInfo.license_owner?.owner_icno)})")</td>
                    </tr>
                    <tr>
                        <td nowrap>Alamat</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">@($"{(string.IsNullOrEmpty(PremisInfo.license_owner?.owner_addr) ? "" : PremisInfo.license_owner?.owner_addr)}")</td>
                    </tr>
                    <tr>
                        <td colspan="3"><div class="e-divider my-3"></div></td>
                    </tr>
                    <tr>
                        <td nowrap>Dokumen Sokongan</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;">
                            @if (!string.IsNullOrEmpty(PremisInfo.license.doc_support))
                            {
                                <a href="@PremisInfo.license.doc_support" target="_blank"><img src="/images/icons-small/documents-text.png" /></a>
                            }  
                        </td>
                    </tr>
                    <tr>
                        <td nowrap>Gambar Perniagaan</td>
                        <td nowrap valign="top">&nbsp;&nbsp;:&nbsp;&nbsp;</td>
                        <td style="width:100%;"></td>
                    </tr>
@*                     <tr>
                        <td colspan="3"><div class="e-status">@GetStatusIconHtml(PremisInfo.status_lesen_id ?? 0)</div></td>
                    </tr> *@
                </table>
@*                 <div class="e-name">No. Lot : @($"{PremisInfo.license.lot}")</div>
                <div class="e-name">No. SSM : @($"{PremisInfo.license.ssm_no}")</div>
                <div class="e-name">No. Lesen : @($"{PremisInfo.license.license_accno}")</div>
                <div class="e-name"> : </div>
                <div class="e-name">Nama Perniagaan : </div>
                <div class="e-name">Alamat : </div>
                <div class="e-divider my-3"></div>
                <div class="e-name">Nama Pemegang Lesen : @($"{PremisInfo.license_owner.owner_name} - ({PremisInfo.license_owner.owner_icno})")</div>
                <div class="e-name">Alamat : @($"{PremisInfo.license_owner.owner_addr}")</div>

                <div class="e-status">@GetStatusIconHtml(PremisInfo.status_lesen_id ?? 0)</div> *@
                @* <div class="e-divider my-3"></div> *@

                List<ImageFile> lesenImg = new List<ImageFile>();

                if (!string.IsNullOrEmpty(PremisInfo.license.g_activity_1))
                    lesenImg.Add(new ImageFile() { Url = PremisInfo.license.g_activity_1 });

                if (!string.IsNullOrEmpty(PremisInfo.license.g_activity_2))
                    lesenImg.Add(new ImageFile() { Url = PremisInfo.license.g_activity_2 });

                if (!string.IsNullOrEmpty(PremisInfo.license.g_activity_3))
                    lesenImg.Add(new ImageFile() { Url = PremisInfo.license.g_activity_3 });

                if (!string.IsNullOrEmpty(PremisInfo.license.g_signbboard_1))
                    lesenImg.Add(new ImageFile() { Url = PremisInfo.license.g_signbboard_1 });

                if (!string.IsNullOrEmpty(PremisInfo.license.g_signbboard_2))
                    lesenImg.Add(new ImageFile() { Url = PremisInfo.license.g_signbboard_2 });

                if (!string.IsNullOrEmpty(PremisInfo.license.g_signbboard_3))
                    lesenImg.Add(new ImageFile() { Url = PremisInfo.license.g_signbboard_3 });

                <div class="mt-2 mb-3">
                    <Carousel imageset="@lesenImg" CssClass="col-12"></Carousel>
                </div>

                @* <div class="e-divider my-3"></div> *@
                <div class="e-email">
                    <a class="receipt-panel" onclick=@(() => ShowNotis("Notis", (string.IsNullOrEmpty(PremisInfo.license.license_accno) ? "" : PremisInfo.license.license_accno)))>
                        <img src="/images/icons-small/script-text.png" alt="" />
                        Notis
                        <span class="@(_notice == 0 ? "badge-button-green" : "badge-button-red")">@_notice</span>
                    </a>

                    <a class="receipt-panel" onclick=@(() => ShowCompound("Kompaun", (string.IsNullOrEmpty(PremisInfo.license.license_accno) ? "" : PremisInfo.license.license_accno)))>
                        <img src="/images/icons-small/receipt-text.png" alt="" />
                        Kompaun
                        <span class="@(_compound == 0 ? "badge-button-green" : "badge-button-red")">@_compound</span>
                    </a>

                    <a class="receipt-panel" onclick=@(() => ShowConfiscation("Sitaan", (string.IsNullOrEmpty(PremisInfo.license.license_accno) ? "" : PremisInfo.license.license_accno)))>
                        <img src="/images/icons-small/box.png" alt="" />
                        Sitaan
                        <span class="@(_confiscation == 0 ? "badge-button-green" : "badge-button-red")">@_confiscation</span>
                    </a>

                    <a class="receipt-panel" onclick=@(() => ShowInspection("Nota Pemeriksaan", (string.IsNullOrEmpty(PremisInfo.license.license_accno) ? "" : PremisInfo.license.license_accno)))>
                        <img src="/images/icons-small/document-task.png" alt="" />
                        Nota Pemeriksaan
                        <span class="@(_inspection == 0 ? "badge-button-green" : "badge-button-red")">@_inspection</span>
                    </a>
                </div>
                <div class="e-divider my-3"></div>
                <div class="e-email">
                    <button class="btn-panel-l" type="button">Maklumat Lesen</button>
                    @*<button class="btn-panel-l">
                        Nota Pemeriksaan
                        <span class="badge-button-green">@_inspection</span>
                    </button>*@
                </div>
            }
            else
            {

                <div class="e-name">No. Lot : -</div>
                <div class="e-name">No. SSM : -</div>
                <div class="e-name">No. Lesen : -</div>
                <div class="e-name">Tempoh Lesen : -</div>
                <div class="e-name">Jumlah (RM) : -</div>
                <div class="e-name">Nama Perniagaan : -</div>
                <div class="e-name">Alamat : -</div>
                <div class="e-divider my-3"></div>
                <div class="e-name">Pemegang Lesen : -</div>
                <div class="e-name">Alamat : -</div>
                <div class="e-name">Dokumen Sokongan : -</div>

@*                <div class="e-name">No. Lot : TIADA DATA</div>
                <div class="e-name">No. SSM : TIADA DATA</div>
                <div class="e-name">No. Lesen : TIADA DATA</div>
                <div class="e-name">Tempoh Lesen : TIADA DATA</div>
                <div class="e-name">Nama Perniagaan : TIADA DATA</div>
                <div class="e-name">Alamat : TIADA DATA</div>
                <div class="e-divider my-3"></div>
                <div class="e-name">Nama Pemegang Lesen : TIADA DATA</div>
                <div class="e-name">Alamat : TIADA DATA</div>

                <div class="e-divider my-3"></div>

                <div class="e-email">
                    <a class="receipt-panel">
                        <img src="/images/icons/script-text.png" alt="" />
                        Notis
                        <span class="badge-button-green">0</span>
                    </a>
                    <a class="receipt-panel">
                        <img src="/images/icons/script.png" alt="" />
                        Notis Tamat Tempoh
                        <span class="badge-button-green">0</span>
                    </a>

                    <a class="receipt-panel">
                        <img src="/images/icons/receipt-text.png" alt="" />
                        Kompaun
                        <span class="badge-button-red">0</span>
                    </a>
                </div>
                <div class="e-divider my-3"></div>
                <div class="e-email">
                    <button class="btn-panel-l" type="button" disabled="true">Maklumat Lesen</button>
                    <button class="btn-panel-l" disabled="true">
                        Nota Pemeriksaan
                        <span class="badge-button-green">0</span>
                    </button>
                    <button class="btn-panel-l" type="button" disabled="true">Maklumat Sitaan</button>
                </div> *@
            }
        </div>
    </div>
</div>


@* <DxPopup HeaderText="@HeaderText" @bind-Visible="@PopupVisible">
    <Content>
        <div class="e-name" style="align-items:end;right:200px;font-size:0.75rem;">Bil. Rekod : @_totalRec</div>
        <DxListBox Data="@_dtDataTaburan"
                   @bind-Value="@_valueTaburan"
                   CssClass="cw-800 ch-600">
            <ItemDisplayTemplate>
                <div class="listbox-item-template" style="border:1px solid #ccc;">
                    <div class="listbox-item-template-text">

                        <span class="listbox-item-template-text-phone e-name">Ref. No. : @context.DataItem.ref_no</span>
                        <span class="listbox-item-template-text-phone e-name">Status : @context.DataItem.trnstatus_view</span>
                        <span class="listbox-item-template-text-phone e-name">Dokumen : <a href="@context.DataItem.doc_pathurl" target="_blank">@context.DataItem.doc_name</a></span>
                        <span class="listbox-item-template-text-phone e-name">Tarikh : @context.DataItem.created_at</span>

                    </div>
                </div>
            </ItemDisplayTemplate>
        </DxListBox>


    </Content>
</DxPopup> *@

<DxWindow @ref=windowRef
          AllowResize="true"
          ShowCloseButton="true"
          CloseOnEscape="true"
          HeaderText=@HeaderText
          FooterText="Footer"
          ShowFooter="true"
          Width="max(80vw, 800px)"
          MinWidth="800"
          MinHeight="500"
          MaxWidth="800"
          MaxHeight="500"
          @bind-Visible=PopupVisible>
    <BodyContentTemplate>
        <DxGrid @ref="Grid"
            Data="_dtDataTaburan"
            KeyFieldName="trn_id"
            ShowGroupPanel="false"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Never"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

                <Columns>
                    <DxGridDataColumn Caption="Ref. No" MinWidth="120" Width="20%" FieldName="ref_no" />
                    <DxGridDataColumn Caption="Status" MinWidth="180" Width="25%" FieldName="trnstatus_view" />
                    <DxGridDataColumn FieldName="doc_name" AllowSort="false" Width="40%" MinWidth="250" TextAlignment="GridTextAlignment.Left">
                    <CellDisplayTemplate Context="displayContext">
                       @*  <a class="d-block text-left" href="javascript:;" @onclick="() => ShowDetails(displayContext)">@(((taburan_view)displayContext.DataItem).doc_name)</a> *@
                        <a href="@(((taburan_view)displayContext.DataItem).doc_pathurl)" target="_blank">@(((taburan_view)displayContext.DataItem).doc_name)</a>
                    </CellDisplayTemplate>
                        <HeaderCaptionTemplate Context="header_name"><span title="Klik pada nama dokumen untuk paparan dokumen">Dokumen</span></HeaderCaptionTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn FieldName="created_at"
                                      DisplayFormat="dd/MM/yyyy"
                                      Caption="Tarikh Data"
                                      MinWidth="100"
                                      Width="15%"
                                      TextAlignment="GridTextAlignment.Center"
                                      SortOrder="GridColumnSortOrder.Ascending"
                                      SortIndex="0"/>
                </Columns>
                @*This is to count the summary*@
                <TotalSummary>
                    <DxGridSummaryItem FooterColumnName="Name"
                                       Name="Custom"
                                       SummaryType=GridSummaryItemType.Count />
                </TotalSummary>

        </DxGrid>
    </BodyContentTemplate>
    <FooterContentTemplate>
@*         <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@context.CloseCallback" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@context.CloseCallback" /> *@
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Tutup" Click="@context.CloseCallback" />
    </FooterContentTemplate>
</DxWindow>

@code {
    [Parameter] public premis_license_tax_view PremisInfo { get; set; }
    [Parameter] public LatLngLiteral? LatLng { get; set; }
    [Parameter] public List<string> Dtfloor { get; set; }

    // [Parameter] public IEnumerable<KeyValuePair<string, object>> ImageAttributes { get; set; }

    List<taburan_view> _dtDataTaburan { get; set; }
    taburan_view _valueTaburan { get; set; }

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    DxWindow windowRef;
    ElementReference popupTarget;

    bool PopupVisible = false;
    string HeaderText;
    int _inspection = 0;
    int _confiscation = 0;
    int _notice = 0;
    int _compound = 0;
    int _totalRec = 0;

    async Task ShowNotis(string headerdtl, string _accNo)
    {

        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Notices/GetNoticeListByLicenseAccNo/{_accNo}";
        // string requestUrl = $"/api/Notices/GetNoticeListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var noticeRoot = JsonConvert.DeserializeObject<List<NoticeRoot>>(dataString);
                var result = new NoticeRoot();
                result = noticeRoot.FirstOrDefault();
                _dtDataTaburan = new List<taburan_view>();
                _totalRec = result.total_records;

                foreach (var _dt in result.notice_lists)
                    {

                        taburan_view _notice = new taburan_view
                        {
                            trn_id = _dt.trn_notice_id,
                            ref_no = string.IsNullOrEmpty(_dt.notice_ref_no) ? "" : _dt.notice_ref_no,
                            section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                            act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                            doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                            doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                            trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                            created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                        };

                        _dtDataTaburan.Add(_notice);
                    }

                    _valueTaburan = _dtDataTaburan.FirstOrDefault();

                }
            }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    async Task ShowCompound(string headerdtl, string _accNo)
    {

        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Compounds/GetCompoundListByLicenseAccNo/{_accNo}";
        // string requestUrl = $"/api/Compounds/GetCompoundListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var cmpdRoot = JsonConvert.DeserializeObject<List<CompoundRoot>>(dataString);
                var result = new CompoundRoot();
                result = cmpdRoot.FirstOrDefault();
                _dtDataTaburan = new List<taburan_view>();
                _totalRec = result.total_records;

                foreach (var _dt in result.compound_lists)
                {

                    taburan_view _compound = new taburan_view
                    {
                        trn_id = _dt.trn_cmpd_id,
                        ref_no = string.IsNullOrEmpty(_dt.cmpd_ref_no) ? "" : _dt.cmpd_ref_no,
                        section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                        act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                        doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                        doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                        trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                        created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                    };

                    _dtDataTaburan.Add(_compound);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    async Task ShowConfiscation(string headerdtl, string _accNo)
    {

        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Confiscations/GetConfiscationListByLicenseAccNo/{_accNo}";
        // string requestUrl = $"/api/Confiscations/GetConfiscationListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var confiscationRoot = JsonConvert.DeserializeObject<List<ConfiscationRoot>>(dataString);
                var result = new ConfiscationRoot();
                result = confiscationRoot.FirstOrDefault();
                _dtDataTaburan = new List<taburan_view>();
                _totalRec = result.total_records;

                foreach (var _dt in result.confiscation_lists)
                {

                    taburan_view _confiscation = new taburan_view
                    {
                        trn_id = _dt.trn_cfsc_id,
                        ref_no = string.IsNullOrEmpty(_dt.cfsc_ref_no) ? "" : _dt.cfsc_ref_no,
                        section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                        act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                        doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                        doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                        trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                            created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                    };

                    _dtDataTaburan.Add(_confiscation);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    async Task ShowInspection(string headerdtl, string _accNo)
    {
        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Inspections/GetInspectionListByLicenseAccNo/{_accNo}";
        // string requestUrl = $"/api/Inspections/GetInspectionListByLicenseAccNo/L01010114436620149";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var inspectionRoot = JsonConvert.DeserializeObject<List<InspectionRoot>>(dataString);
                var result = new InspectionRoot();
                result = inspectionRoot.FirstOrDefault();
                _dtDataTaburan = new List<taburan_view>();
                _totalRec = result.total_records;

                foreach (var _dt in result.inspection_lists)
                {

                    taburan_view _inspection = new taburan_view
                    {
                        trn_id = _dt.trn_inspect_id,
                        ref_no = string.IsNullOrEmpty(_dt.inspect_ref_no) ? "" : _dt.inspect_ref_no,
                        section_code = string.IsNullOrEmpty(_dt.section_code) ? "" : _dt.section_code,
                        act_code = string.IsNullOrEmpty(_dt.act_code) ? "" : _dt.act_code,
                        doc_pathurl = string.IsNullOrEmpty(_dt.doc_pathurl) ? "" : _dt.doc_pathurl,
                        doc_name = string.IsNullOrEmpty(_dt.doc_name) ? "" : _dt.doc_name,
                        trnstatus_view = string.IsNullOrEmpty(_dt.trnstatus_view) ? "" : _dt.trnstatus_view,
                        created_at = string.IsNullOrEmpty(_dt.created_at) ? "" : DateTime.Parse(_dt.created_at.Substring(0, 10)).ToString("dd/MM/yyyy")
                    };

                    _dtDataTaburan.Add(_inspection);
                }

                _valueTaburan = _dtDataTaburan.FirstOrDefault();

            }
        }

        PopupVisible = true;
        HeaderText = "SENARAI " + headerdtl.ToUpper();
        await windowRef.ShowAtAsync(popupTarget);
    }

    protected override async Task OnInitializedAsync()
    {
        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/License/GetTicketCountByLicenseAccNo/{PremisInfo.license_accno}";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var tasks = new List<Task>();
                dynamic _dtTicket = JsonConvert.DeserializeObject(dataString);

                _inspection = _dtTicket.inspection;
                _confiscation = _dtTicket.confiscation;
                _notice = _dtTicket.notice;
                _compound = _dtTicket.compound;
            }
        }
    }


    public async Task OpenNewStreetWindow(string latitude, string longitude)
    {
        await JSRuntime.InvokeVoidAsync("open", "http://maps.google.com/maps?q=&layer=c&cbll=" + latitude + "," + longitude + "&cbp=11,0,0,0,0", "_blank");
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    public MarkupString GetStatusIconHtml(int status_id)
    {
        string priorytyClass = "nodata";
        string title = " TIADA DATA ";
        if (status_id == 1)
        {
            priorytyClass = "aktif";
            title = " LESEN AKTIF ";
        }
        else if (status_id == 5)
        {
            priorytyClass = "danger";
            title = " TIDAK BERLESEN ";
        }
        else if (status_id == 3)
        {
            priorytyClass = "gantung";
            title = " LESEN GANTUNG ";
        }

        string html = string.Format("<span class='e-badge e-priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass, title);
        return new MarkupString(html);

    }

    // string GetColorLot(int typeLot)
    // {
    //     switch (typeLot)
    //     {
    //         case 1:
    //             return "Green";
    //         case 2:
    //             return "Red";
    //         case 3:
    //             return "Blue";
    //         case 4:
    //             return "Orange";
    //         case 5:
    //             return "Yellow";
    //         case 6:
    //             return "#ccc";
    //         case 7:
    //             return "Purple";
    //         default:
    //             return "#ccc";
    //     }
    // }
}