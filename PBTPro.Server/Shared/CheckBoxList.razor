@typeparam TItem
<div style=@Style>
    @if (Data != null)
    {
        foreach (var item in Data)
        {
            var Text = TextField?.Invoke(item);

            string[] arrText = Text.Split(new[] { ":" }, StringSplitOptions.None);

            var Value = ValueField?.Invoke(item).ToString();
            bool Checked = true;
            if (SelectedValues.Contains(Value))
            {
                Checked = true;
            }

            <tr>
                <td class="checkTapis">
                    <label class="lblcontainer">
                        <input type="checkbox" checked=@Checked @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }">
                      <span class="checkmark"></span>
                    </label>
                </td>
                <td class="bulletTapis">
                    <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 30 30"><circle cx="15" cy="15" r="5" fill="@arrText[1]" /></svg>
                </td>
                <td class="textTapis"><lable class="textDesc">@arrText[0]</lable></td>
            </tr>

@*             <input type="checkbox" checked=@Checked
                   @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }" />
            @Text <br /> *@
        }
    }
    @ChildContent
</div>

@code {
    //Data for the Checkbox 
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    // The field to be shown adjacent to checkbox
    [Parameter] public Func<TItem, string> TextField { get; set; }
    // The Value which checkbox will return when checked 
    [Parameter] public Func<TItem, object> ValueField { get; set; }
    // CSS Style for the Checkbox container 
    [Parameter] public string Style { get; set; }
    // Any childd content for the control (if needed)
    [Parameter] public RenderFragment ChildContent { get; set; }
    // The array which contains the list of selected checkboxs 
    [Parameter] public List<string> SelectedValues { get; set; }

    //Method to update the selected value on click on checkbox 
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }
}
