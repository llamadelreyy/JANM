@page "/graphinspection"
@attribute [AllowAnonymous]

@using PBTPro.Data
@using PBTPro.DAL.Models
@using PBTPro.DAL.Models.PayLoads
@using System.Drawing
@using Newtonsoft.Json

@inject ApiConnector _ApiConnector // 07/11/2024 - API Fetcher - ismail
@inject PBTAuthStateProvider _PBTAuthStateProvider

<div class="d-lg-flex border-bottom">
    <div class="textTitle p-2"><a onclick="history.back();" class="nav-title">Ringkasan Eksekutif</a><span class="nav-subPage">/Perincian Nota Pemeriksaan</span></div>
</div>

<div class="item-container-y">

    <div class="w-100 row borderGraph">
        <span class="chart-title mb-2">Jumlah Nota Pemeriksaan Mengikut Bulan Pada Tahun @DateTime.Now.Year</span>
        <div class="col-9 mt-1" style="justify-items:center;">

            <DxChart Data="@ChartData" BarGroupWidth="50" Width="100%">

                <DxChartBarSeries Name="@DateTime.Now.Year.ToString()"
                                  T="DataArea"
                                  TArgument="string"
                                  TValue="int"
                                  Color="Color.Green"
                                  SummaryMethod="Enumerable.Sum"
                                  ArgumentField="@(s => s.Month)"
                                  BarWidth="50"
                                  ValueField="@(s => s.Total)" />
                <DxChartLegend Visible="false" />

                <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="chart-tooltip">@context.Point.Argument : @($"{context.Point.Value:N0}")</div>
                    </div>
                </DxChartTooltip>
            </DxChart>
        </div>
    </div>

</div>

@code {
    private List<DataArea> ChartData;

    protected override async Task OnInitializedAsync()
    {
        ChartData = await GetArea(); // Call the async method to fetch the data
    }

    async Task<List<DataArea>> GetArea()
    {
        // Define a dictionary to map month numbers to month names.
        var monthNames = new Dictionary<int, string>
        {
            {1, "Jan"}, {2, "Feb"}, {3, "Mac"},
            {4, "Apr"}, {5, "Mei"}, {6, "Jun"},
            {7, "Jul"}, {8, "Ogo"}, {9, "Sep"},
            {10, "Okt"}, {11, "Nov"}, {12, "Dis"}
        };

        List<DataArea> result = new List<DataArea>();

        _ApiConnector.accessToken = _PBTAuthStateProvider.accessToken;
        string requestUrl = $"/api/Dashboard/GetTotalInspectionGraph";
        var response = await _ApiConnector.ProcessLocalApi(requestUrl);

        if (response.ReturnCode == 200)
        {
            string? dataString = response?.Data?.ToString();
            if (!string.IsNullOrWhiteSpace(dataString))
            {
                var tasks = new List<Task>();
                dynamic _dtTicket = JsonConvert.DeserializeObject(dataString);
                var dataList = _dtTicket.ToObject<List<dynamic>>();

                if (dataList != null)
                {
                    foreach (var item in dataList)
                    {
                        int month = item.month; // Extract month number
                        int count = item.count; // Extract count value

                        if (monthNames.TryGetValue(month, out string monthName))
                        {
                            // Create a new DataArea instance and add it to the list.
                            result.Add(new DataArea(monthName.ToUpper(), count));
                        }
                    }
                }

            }
        }


        // result.Add(new DataArea("Feb", 23));
        // result.Add(new DataArea("Mac", 89));

        return await Task.FromResult(result);
    }

    public class DataArea
    {
        public string Month { get; set; }
        public int Total { get; set; }
        public DataArea(string argument, int value)
        {
            Month = argument;
            Total = value;
        }
    }


}
