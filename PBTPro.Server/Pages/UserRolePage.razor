@page "/user_role"
@attribute [AllowAnonymous]

@using PBTPro.Data
@using PBTPro.DAL.Models
@inject RoleService _RoleService
@inject UserRoleService _UserRoleService
@inject UserService _UserService
@inject NavigationManager NavigationManager

<style>
    .dxbl-grid {
        height: 88vh;
        max-height: 88vh;
    }
</style>

<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="\images\icons-small\xfn-friend.png" />
        <div class="textTitle">Peranan Pengguna</div>
    </div>
</div>

<div class="item-container-x">

    <DxGrid @ref="Grid"
            Data="dataSource"
            KeyFieldName="table_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>
            <DxGridCommandColumn Width="55px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((UserRoleProp)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn Caption="Nama Pengguna" MinWidth="180" Width="28%" FieldName="user_name" />
            <DxGridDataColumn Caption="Nama Penuh Pengguna" MinWidth="240" Width="32%" FieldName="user_full_name" />
            <DxGridDataColumn Caption="Peranan" MinWidth="120" Width="20%" GroupIndex="0" FieldName="role_name" />
            <DxGridDataColumn Caption="Keterangan" MinWidth="250" Width="36%" FieldName="role_desc" TextAlignment="GridTextAlignment.Left" />

            <DxGridDataColumn FieldName="created_date"
                              DisplayFormat="dd/MM/yyyy"
                              Caption="Tarikh Data"
                              MinWidth="100"
                              Width="12%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0">
                <FilterMenuTemplate>
                    <DateRange FilterContext="context" />
                </FilterMenuTemplate>
            </DxGridDataColumn>
        </Columns>

        <EditFormTemplate Context="EditFormContext">
            @{
                var dtUserRole = (UserRoleProp)EditFormContext.EditModel;
                // // valueRole = GetUserRole(dtData);

                //For edit need to get all the role belong to selected user
                List<RoleProp> arrItem = new List<RoleProp>();
                RoleProp _item;

                //Loop the main data to get all the role for selected user
                @foreach (var item in dataSource)
                {
                    if (dtUserRole.user_id == item.user_id)
                    {
                        _item = new RoleProp();
                        _item.role_id = item.role_id;
                        _item.role_name = item.role_name;
                        _item.role_desc = item.role_desc;
                        _item.role_select = true;
                        _item.created_date = item.created_date;
                        arrItem.Add(_item);
                    }
                }

                valueRole = arrItem;

                // This is to check whether in add new @ edit mode
                boolLockDropDown = Grid.IsEditingNewRow();
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem ColSpanMd="6" BeginRow="true">
                    <table class="layout_edit">
                        <tr>
                            <td nowrap>Pengguna</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxComboBox Data="@dataUser"
                                            NullText="Pilih pengguna ..."
                                            ShowValidationIcon="true"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            Enabled="@boolLockDropDown"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            TextFieldName="@nameof(UserProp.Text)"
                                            ValueFieldName="user_id"
                                            CssClass="combo-width"
                                            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
                                            @bind-Value="@dtUserRole.user_id">
                                </DxComboBox>
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Peranan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
@*                                  <DxListBox Data="@dataRole"
                                           TextFieldName="@nameof(RoleProp.Text)"
                                           ValueFieldName="@nameof(RoleProp.role_id)"
                                           SelectionMode="ListBoxSelectionMode.Multiple"
                                           ShowCheckboxes="true"
                                           Enabled="true"
                                           @bind-Values="@valueRole">
                                </DxListBox> *@

                                <div class="multiselect">
                                    <div id="checkboxes">
                                        @{
                                            foreach (var item in dataRole)
                                            {
                                                bool blnSelected = false;
                                                foreach (var value in valueRole)
                                                {
                                                    if (item.role_id == value.role_id)
                                                    {
                                                        blnSelected = true;
                                                        item.role_select = true;
                                                    }
                                                }

                                                if (blnSelected)
                                                {
                                                    <div>
                                                        <label class="multiselect-container" for="@item.role_id">
                                                            @item.role_name (@item.role_desc)
                                                            <input type="checkbox" class="check_role" id="@item.role_id" checked="checked" @onchange="@((e) => CheckboxChanged(e, item.role_id))" />                                                          
                                                            <span class="checkmark"></span>
                                                        </label>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div>
                                                        <label class="multiselect-container" for="@item.role_id">
                                                            @item.role_name (@item.role_desc)
                                                            <input type="checkbox" class="check_role" id="@item.role_id" @onchange="@((e) => CheckboxChanged(e, item.role_id))" />                                                           
                                                            <span class="checkmark"></span>
                                                        </label>
                                                    </div>
                                                }

                                            }
                                        }
                                    </div>
                                </div>


                            </td>
                        </tr>
                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>

        @*This is to count the summary*@
        <TotalSummary>
            <DxGridSummaryItem FooterColumnName="role_name"
                               Name="Custom"
                               SummaryType=GridSummaryItemType.Count />
        </TotalSummary>

    </DxGrid>

    @*
    <hr style="background-color:transparent; border: 2px solid #FFF;padding:0;margin:auto;" />
    <DxButton Text="Export XLSX" Click="ExportXlsx_Click" />
    <DxButton Text="Export XLS" Click="ExportXls_Click" />
    <DxButton Text="Export CSV" Click="ExportCsv_Click" />
    <hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
    *@

</div>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>



@code {
    [Inject] IToastNotificationService ToastService { get; set; }
    IEnumerable<UserRoleProp> dataSource;
    IEnumerable<UserProp> dataUser;
    IEnumerable<RoleProp> dataRole;
    IEnumerable<RoleProp> valueRole;

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    int intCurrentUserId { get; set; } = 0;
    bool boolLockDropDown { get; set; } = false;
    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }

    UserRoleProp dtData { get; set; }

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        //intCurrentUserId = _AllocationAuthenticationStateProvider.CurrentUser.userID;
        dataSource = await _UserRoleService.GetUserRoleAsync();
        dataUser = await _UserService.GetUserAsync();
        dataRole = await _RoleService.GetRoleAsync();
        // // valueRole = dataRole;
        DataLoadedTcs.TrySetResult(true);
    }

    protected void CheckboxChanged(ChangeEventArgs e, int key)
    {
        var i = dataRole.FirstOrDefault(i => i.role_id == key);
        if (i != null)
        {
            i.role_select = (bool)e.Value;
        }
    }

    // // IEnumerable<RoleProp> GetUserRole(UserRoleProp value)
    // // {
    // //     //For edit need to get all the role belong to selected user
    // //     List<RoleProp> arrItem = new List<RoleProp>();
    // //     RoleProp _item;

    // //     //Loop the main data to get all the role for selected user
    // //     @foreach (var item in dataSource)
    // //     {
    // //         if (value.user_id == item.user_id)
    // //         {
    // //             _item = new RoleProp();
    // //             _item.role_id = item.role_id;
    // //             _item.role_name = item.role_name;
    // //             _item.role_desc = item.role_desc;
    // //             _item.created_date = item.created_date;
    // //             arrItem.Add(_item);
    // //         }
    // //     }

    // //     return arrItem.AsEnumerable();
    // // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync(); //.StartEditRowAsync(0);
        }
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (UserRoleProp)e.EditModel;
        if (_data.role_desc == null || _data.role_desc.Trim() == "")
        {
            e.AddError(nameof(_data.role_desc), "!!!!!!. Medan perlu diisi.");
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        bool blnSuccess = false;

        //update selected user_id dgn selected role id
        foreach (var item in dataRole)
        {
            
        }

        if (e.IsNew)
            blnSuccess = true; //await _UserRoleService.InsertUserRoleAsync((UserRoleProp)e.EditModel, intCurrentUserId);
        else
            blnSuccess = true; //await _UserRoleService.UpdateUserRoleAsync((UserRoleProp)e.EditModel, intCurrentUserId);

        if (blnSuccess)
        {
            await UpdateDataAsync();

            ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
                Title = "Proses kemaskini selesai."
            });
        }
        else
        {
            ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Danger,
                Title = "Ralat telah berlaku! Sila hubungi pentadbir sistem."
            });
        }
    }

    async Task UpdateDataAsync()
    {
        //Refresh back the data source
        dataSource = await _UserRoleService.GetUserRoleAsync();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(UserRoleProp item)
    {
        strSelected = item.role_name;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        if (dtData != null)
        {
            //await _UserRoleService.RemoveUserRoleAsync((UserRoleProp)dtData);
            //await UpdateDataAsync();
        }
        ConfirmationShown = false;
        ToastService.ShowToast(new ToastOptions()
        {
            ProviderName = "Overview",
            ThemeMode = ToastThemeMode.Saturated,
            RenderStyle = ToastRenderStyle.Success,
            Title = "Proses hapus selesai."
        });
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }
}
