@page "/user_role"
@attribute [AllowAnonymous]

@implements IDisposable

@inject RoleService _RoleService
@inject UserRoleService _UserRoleService
@inject UserService _UserService
@inject NavigationManager NavigationManager
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 88vh;
        max-height: 88vh;
    }
</style>

<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="\images\icons-small\xfn-friend.png" />
        <div class="textTitle">Peranan Pengguna</div>
    </div>
</div>

<div class="item-container-x">

    <DxGrid @ref="Grid"
            Data="dataSource"
            KeyFieldName="table_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            CustomizeEditModel="OnCustomizeEditModel"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>
            <DxGridCommandColumn Width="55px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((user_role)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn Caption="Nama Pengguna" MinWidth="180" Width="28%" FieldName="user_name" />
            <DxGridDataColumn Caption="Nama Penuh Pengguna" MinWidth="240" Width="32%" FieldName="user_full_name" />
            <DxGridDataColumn Caption="Peranan" MinWidth="120" Width="20%" GroupIndex="0" FieldName="role_name" />
            <DxGridDataColumn Caption="Keterangan" MinWidth="250" Width="36%" FieldName="role_desc" TextAlignment="GridTextAlignment.Left" />

            <DxGridDataColumn FieldName="created_date"
                              DisplayFormat="dd/MM/yyyy"
                              Caption="Tarikh Data"
                              MinWidth="100"
                              Width="12%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0">
                <FilterMenuTemplate>
                    <DateRange FilterContext="context" />
                </FilterMenuTemplate>
            </DxGridDataColumn>
        </Columns>

        <EditFormTemplate Context="EditFormContext">
            @{
                var dtUserRole = (user_role)EditFormContext.EditModel;

                // This is to check whether in add new @ edit mode
                boolLockDropDown = Grid.IsEditingNewRow();
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem ColSpanMd="6" BeginRow="true">
                    <table class="layout_edit">
                        <tr>
                            <td nowrap>Pengguna</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxComboBox Data="@dataUser"
                                            NullText="Pilih pengguna ..."
                                            ShowValidationIcon="true"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            Enabled="@boolLockDropDown"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            TextFieldName="@nameof(system_user.Text)"
                                            ValueFieldName="user_id"
                                            CssClass="combo-width"
                                            SelectedItemChanged="@((system_user x) => SelectedItemChanged(x))"
                                            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
                                            @bind-Value="@dtUserRole.user_id">
                                </DxComboBox>
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Peranan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">

                                <div class="multiselect">
                                    <div id="checkboxes">
                                        @{
                                            //Select back the role for selected user
                                            foreach (var item in dataRole)
                                            {
                                                bool blnSelected = false;
                                                foreach (var value in valueRole)
                                                {
                                                    if (item.role_id == value.role_id)
                                                    {
                                                        blnSelected = value.role_select; // true;
                                                        item.role_select = value.role_select;  //true;
                                                    }
                                                }


                                                <div>
                                                    <label class="multiselect-container" for="@item.role_id">
                                                        @item.role_name (@item.role_desc)
                                                        <input type="checkbox" class="check_role" id="@item.role_id" checked="@(blnSelected ? true : false)" @onchange="@((e) => CheckboxChanged(e, item.role_id))" />
                                                        <span class="checkmark"></span>
                                                    </label>
                                                </div>
       

                                            }
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>

        @*This is to count the summary*@
        <TotalSummary>
            <DxGridSummaryItem FooterColumnName="role_name"
                               Name="Custom"
                               SummaryType=GridSummaryItemType.Count />
        </TotalSummary>

    </DxGrid>

</div>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>



@code {
    IEnumerable<user_role> dataSource;
    IEnumerable<system_user> dataUser;
    IEnumerable<system_role> dataRole;
    IEnumerable<system_role> valueRole;
    

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    int intCurrentUserId { get; set; } = 0;
    bool boolLockDropDown { get; set; } = false;
    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }

    user_role dtData { get; set; }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        //intCurrentUserId = _AllocationAuthenticationStateProvider.CurrentUser.userID;
        dataSource = await _UserRoleService.GetUserRoleAsync();
        dataUser = await _UserService.GetUserAsync();
        dataRole = await _RoleService.GetRoleAsync();
        // // valueRole = dataRole;
        DataLoadedTcs.TrySetResult(true);
    }

    protected void CheckboxChanged(ChangeEventArgs e, int key)
    {
        var i = dataRole.FirstOrDefault(i => i.role_id == key);
        if (i != null)
        {
            i.role_select = (bool)e.Value;
        }

        //Clear the selection
        foreach (var item in valueRole)
        {
            if (item.role_id == key)
                item.role_select = (bool)e.Value;
        }

    }


    void SelectedItemChanged(system_user x)
    {

        if (x != null)
        {
            List<system_role> arrItem = new List<system_role>();
            system_role _item;

            //Loop the main data to get all the role for selected user
            @foreach (var item in dataSource)
            {
                if (x.user_id == item.user_id)
                {
                    _item = new system_role();
                    _item.role_id = item.role_id;
                    _item.role_name = item.role_name;
                    _item.role_desc = item.role_desc;
                    _item.role_select = true;
                    _item.created_date = item.created_date;
                    arrItem.Add(_item);

                    //Mark that role is selected
                    foreach (var _role in dataRole)
                    {
                        if (_role.role_id == item.role_id)
                            _role.role_select = true;
                    }
                }
            }

            valueRole = arrItem;
        }

    }

    void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dtUserRole = (user_role)e.EditModel;

        List<system_role> arrItem = new List<system_role>();
        system_role _item;

        //Loop the main data to get all the role for selected user
        @foreach (var item in dataSource)
        {
            if (dtUserRole.user_id == item.user_id)
            {
                _item = new system_role();
                _item.role_id = item.role_id;
                _item.role_name = item.role_name;
                _item.role_desc = item.role_desc;
                _item.role_select = true;
                _item.created_date = item.created_date;
                arrItem.Add(_item);
            }
        }

        valueRole = arrItem;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync(); //.StartEditRowAsync(0);
        }
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (user_role)e.EditModel;
        if (_data.user_id == 0)
        {
            e.AddError(nameof(_data.user_id), "Sila pilih pengguna dari senarai.");
        }

        int intCountRole = 0;
        foreach (var item in dataRole)
        {
            if (item.role_select)
                intCountRole++;
        }

        if (intCountRole == 0)
        {
            e.AddError(nameof(_data.user_id), "Sila pilih peranan bagi pengguna.");
        }


    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        var editModel = e.EditModel as user_role;

        //update selected user_id with selected role id
        List<user_role> saveUserRole = new List<user_role>();
        user_role _item;

        //Loop the main data to get all the role for selected user
        @foreach (var item in dataRole)
        {
            if (item.role_select == true)
            {
                _item = new user_role();
                _item.role_id = item.role_id;
                _item.role_name = item.role_name;
                _item.role_desc = item.role_desc;
                _item.user_id = editModel.user_id;
                saveUserRole.Add(_item);
            }
        }

        //Insert user with role
        // response = await _UserRoleService.SaveUserRole(saveUserRole);

        if (response.ReturnCode == 200)
        {
            await UpdateDataAsync();
            HandleResponse("Proses kemaskini selesai.");
        }
        else
        {
            HandleResponse(response.ReturnMessage, "Error");
        }

    }

    async Task UpdateDataAsync()
    {
        //Refresh back the data source
        dataSource = await _UserRoleService.RefreshUserRoleAsync();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(user_role item)
    {
        strSelected = item.role_name;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            // response = await _UserRoleService.Delete(dtData.user_id, dtData.role_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while delete the edit model: {ex.Message}");
        }
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
}
