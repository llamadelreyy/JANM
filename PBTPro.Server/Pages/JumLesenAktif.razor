@page "/jumlesenaktif"
@attribute [AllowAnonymous]

@using System.Drawing
@using PBTPro
@using PBTPro.Shared
@using PBTPro.Data
@using PBTPro.DAL
@using PBTPro.DAL.Models
@using PBTPro.DAL.Services
@using PBTPro.DAL.Models.CommonServices
@using DevExpress.Blazor
@using PBTPro.DAL.Models.PayLoads

@inject DashboardService _DashboardService

<div class="d-lg-flex border-bottom">
    <div class="textTitle p-2"><a onclick="history.back();" class="nav-title">Ringkasan Eksekutif</a><span class="nav-subPage">/Perincian Lesen</span></div>
</div>

<div class="item-container-y">
    <div class="w-100 row borderGraph">
        <span class="chart-title">Jumlah Premis Mengikut Status Lesen Terkini</span>
        <div class="col-9" style="justify-items:center;">

            <DxPieChart Data="@GetData()"
                        Width="400"
                        InnerDiameter="0"
                        StartAngle="0"
                        SegmentDirection="PieChartSegmentDirection.Clockwise"
                        Palette="@Colors">
                <DxChartLegend Visible="false" />
                <DxPieChartSeries ArgumentField="@((DataPoint s) => s.Argument)"
                                    ValueField="@((DataPoint s) => s.Value)">

                    <DxChartSeriesLabel Visible="true"
                                    Position="RelativePosition.Outside">
                            <DxChartSeriesLabelConnector Visible="true" />
                    </DxChartSeriesLabel>
                </DxPieChartSeries>
                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="chart-tooltip">@context.Point.Argument</div>
                        <div class="dashboard-center-text chart-tooltip">@($"{context.Point.Value:#,0.}")</div>
                    </div>
                </DxChartTooltip>
            </DxPieChart>
        </div>
        <div class="col" style="border-left:1px solid #ccc;">
            <div class="card border-0 w-100 mt-lg-3">
                <div class="card-body p-1">
                    <div class="palette-container">
                        @* @for (int i = 0; i < Colors.Length; i++) *@
                        @foreach (var data in GetData())
                        {
                            var color = Colors[data.Index];
                            <div class="p-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 30 30"><rect width="15" height="15" x="5" y="7" rx="1" ry="1" fill="@color" /></svg>
                                <span class="chart-legend">@data.Argument</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="w-100 row borderGraph">
        <span class="chart-title">Jumlah Status Rondaan Premis @DateTime.Now.Year.ToString()</span>
        <div class="col-9 mt-3" style="justify-items:center;">

            <DxChart Data="@GetArea()" BarGroupWidth="50" Width="100%">

                <DxChartBarSeries Name="@DateTime.Now.Year.ToString()"
                                  T="DataArea"
                                  TArgument="string"
                                  TValue="int"
                                  Color="Color.Orange"
                                  SummaryMethod="Enumerable.Sum"
                                  ArgumentField="@(s => s.City)"
                                  ValueField="@(s => s.Total)" />
                <DxChartLegend Visible="false" />

                <DxChartTooltip Enabled="true"
                                Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold chart-tooltip">@context.Point.Argument : @($"{context.Point.Value:N0}")</div>
                    </div>
                </DxChartTooltip>
            </DxChart>
        </div>
    </div>


    @* <div class="item-container-y">
        <div class="w-100 row borderGraph">
            <span class="chart-title">Jumlah Lesen Aktif Mengikut Jenis Lesen</span>
            <div class="col-9" style="justify-items:center;">

                <DxPieChart Data="@GetLesenType()"
                            Width="400"
                            InnerDiameter="0"
                            StartAngle="80"
                            SegmentDirection="PieChartSegmentDirection.Clockwise"
                            Palette="@Colors">
                    <DxChartLegend Visible="false" />
                    <DxPieChartSeries ArgumentField="@((DataType s) => s.Type)"
                                      ValueField="@((DataType s) => s.Total)">

                        <DxChartSeriesLabel Visible="true"
                                            Position="RelativePosition.Outside">
                            <DxChartSeriesLabelConnector Visible="true" />
                        </DxChartSeriesLabel>
                    </DxPieChartSeries>
                    <DxChartTooltip Enabled="true"
                                    Position="RelativePosition.Outside">
                        <div style="margin: 0.75rem">
                            <div class="chart-tooltip">@context.Point.Argument</div>
                            <div class="dashboard-center-text chart-tooltip">@($"{context.Point.Value:#,0.}")</div>
                        </div>
                    </DxChartTooltip>
                </DxPieChart>
            </div>
            <div class="col" style="border-left:1px solid #ccc;">
                <div class="card border-0 w-100 mt-lg-3">
                    <div class="card-body p-1">
                        <div class="palette-container">
                            @foreach (var data in GetLesenType())
                            {
                                var color = Colors[data.No];
                                <div class="p-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 30 30"><rect width="15" height="15" x="5" y="7" rx="1" ry="1" fill="@color" /></svg>
                                    <span class="chart-legend">@data.Type</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>*@

</div> 

@code {

    dashboard_view dtSource = new dashboard_view();
    dashboard_view dtFinancial = new dashboard_view();

    string[] Colors = new string[] { "green", "red", "orange", "chartreuse", "blue", "grey", "purple", "chocolate", "saddlebrown", "burlywood" };
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        if (dtSource != null)
            dtSource = await _DashboardService.GetDashboardData();

        dtFinancial = await _DashboardService.GetFinancialDashboard();

        DataLoadedTcs.TrySetResult(true);
    }


    List<DataPoint> GetData()
    {
        List<DataPoint> result = new List<DataPoint>();
        result.Add(new DataPoint("Premis Berlesen", dtSource.premis_berlesen, 0));
        result.Add(new DataPoint("Premis Lesen Tamat Tempoh", dtSource.premis_tamat_tempoh_lesen, 1));
        result.Add(new DataPoint("Premis Tidak Berlesen", dtSource.premis_tiada_lesen, 2));

        return result;
    }

    public class DataPoint
    {
        public string Argument { get; set; }
        public int Value { get; set; }
        public int Index { get; set; }
        public DataPoint(string argument, int value, int pos)
        {
            Argument = argument;
            Value = value;
            Index = pos;
        }
    }

    List<DataArea> GetArea()
    {
        List<DataArea> result = new List<DataArea>();
        result.Add(new DataArea("Premis Diperiksa", dtSource.premis_diperiksa, DateTime.Now.Year));

        result.Add(new DataArea("Premis Dikenakan Tindakan", dtSource.premis_dikenakan_tindakan, DateTime.Now.Year));

        result.Add(new DataArea(" Premis Dilawati", dtSource.total_premis_dilawat ?? 0, DateTime.Now.Year));

        return result;
    }

    public class DataArea
    {
        public string City { get; set; }
        public int Total { get; set; }
        public int Year { get; set; }
        public DataArea(string argument, int value, int year)
        {
            City = argument;
            Total = value;
            Year = year;
        }
    }

    // List<DataType> GetLesenType()
    // {
    //     List<DataType> result = new List<DataType>();
    //     result.Add(new DataType(0, "Lesen Premis", 2154));
    //     result.Add(new DataType(1, "Lesen Kantin Sekolah", 113));
    //     result.Add(new DataType(2, "Lesen Komposit Premis & Papan Tanda", 300));
    //     result.Add(new DataType(3, "Lesen Hotel Dan Asrama", 30));
    //     result.Add(new DataType(4, "Lesen Haiwan Peliharaan", 1123));
    //     result.Add(new DataType(5, "Lesen Kantin Kilang", 56));
    //     result.Add(new DataType(6, "Lesen Papan Tanda", 389));
    //     result.Add(new DataType(7, "Lain-Lain Perniagaan", 130));

    //     return result;
    // }

    // public class DataType
    // {
    //     public int No { get; set; }
    //     public string Type { get; set; }
    //     public int Total { get; set; }
    //     public DataType(int index, string argument, int value)
    //     {
    //         No = index;
    //         Type = argument;
    //         Total = value;
    //     }
    // }

}