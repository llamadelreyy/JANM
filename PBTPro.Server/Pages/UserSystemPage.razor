@page "/user_system"
@attribute [AllowAnonymous]

@using PBTPro
@using PBTPro.Shared
@using PBTPro.Data
@using PBTPro.DAL
@using PBTPro.DAL.Models
@using PBTPro.DAL.Services
@using PBTPro.DAL.Models.CommonServices

@inject UserService _UserService
@inject UnitService _UnitService
@inject DepartmentService _DepartmentService
@inject SectionService _SectionService
@inject NavigationManager NavigationManager
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

<DxLoadingPanel @bind-Visible="PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Capaian Data...">

<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="\images\icons-small\xfn.png" />
        <div class="textTitle">Pengguna Sistem</div>
    </div>
</div>


<div class="item-container-x">

    <DxGrid @ref="Grid"
            Data="dataSource"
            KeyFieldName="Id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>
            <DxGridCommandColumn Width="55px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((ApplicationUser)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn Caption="Jabatan" MinWidth="100" Width="12%" FieldName="dept_name" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="Seksyen" MinWidth="120" Width="13%" FieldName="div_name" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="Unit" MinWidth="120" Width="12%" FieldName="unit_name" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="Id Pengguna" MinWidth="100" Width="10%" FieldName="UserName" />
            <DxGridDataColumn Caption="Nama Penuh" MinWidth="150" Width="20%" FieldName="full_name" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="No Mobile" MinWidth="100" Width="12%" FieldName="PhoneNumber" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="Emel" MinWidth="150" Width="15%" FieldName="Email" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn FieldName="CreatedAt"
                                DisplayFormat="dd/MM/yyyy"
                                Caption="Tarikh Data"
                                MinWidth="100"
                                Width="12%"
                                TextAlignment="GridTextAlignment.Center"
                                SortOrder="GridColumnSortOrder.Ascending"
                                SortIndex="0">
                <FilterMenuTemplate>
                    <DateRange FilterContext="context" />
                </FilterMenuTemplate>
            </DxGridDataColumn>
        </Columns>

        <EditFormTemplate Context="EditFormContext">
            @{
                var dtEdit = (ApplicationUser)EditFormContext.EditModel;
                if (Grid.IsEditingNewRow())
                    strIdPengguna = string.Empty;
                else
                    strIdPengguna = dtEdit.IdNo;
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem ColSpanMd="6" ColSpanLg="8" BeginRow="true">
                    <table class="layout_edit">
                        <tr height="30px">
                            <td nowrap>Id Pengguna</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%">
                                @strIdPengguna
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Nama Penuh</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                <DxTextBox @bind-Text="@dtEdit.full_name"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            BindValueMode="BindValueMode.OnInput"
                                            NullText="Masukkan nama penuh ..."
                                            Maxlength="60"
                                            ShowValidationIcon="true"
                                            CssClass="cw-320" style="width:350px"  />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>No Kad Pengenalan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxMaskedInput @bind-Value="@dtEdit.IdNo"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                NullText="cth: 701231161234"
                                                Maxlength="12"
                                                ShowValidationIcon="true"
                                                CssClass="cw-320" style="width:170px"
                                                Mask="000000000000" />            
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap>No Tel. Bimbit</td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxMaskedInput @bind-Value="@dtEdit.PhoneNumber"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                BindValueMode="BindValueMode.OnInput"
                                                Maxlength="14"
                                                ShowValidationIcon="true"
                                                CssClass="cw-320" style="width:170px"
                                                MaskMode=MaskMode.Text
                                                Mask="99999999999999">
                                    <DxTextMaskProperties SaveLiteral=false></DxTextMaskProperties>
                                </DxMaskedInput>

                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Jabatan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                <DxComboBox Data="@dtDepartment"
                                            NullText="Pilih Jabatan ..."
                                            ShowValidationIcon="true"
                                            FilteringMode="DataGridFilteringMode.Contains"
                                            @bind-Value="@dtEdit.dept_id"
                                            TextFieldName="dept_name"
                                            ValueFieldName="dept_id">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Seksyen</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                @{
                                    var _dtSection = dtSection.Where(x => x.dept_id == dtEdit?.dept_id);
                                }
                                <DxComboBox Data="@_dtSection"
                                            NullText="Pilih Seksyen ..."
                                            ShowValidationIcon="true"
                                            FilteringMode="DataGridFilteringMode.Contains"
                                            @bind-Value="@dtEdit.div_id"
                                            TextFieldName="div_code_name"
                                            ValueFieldName="div_id">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Unit</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                @{
                                    var _dtUnit = dtUnit.Where(x => x.dept_id == dtEdit?.dept_id && x.div_id == dtEdit?.div_id);
                                }
                                <DxComboBox Data="@_dtUnit"
                                            NullText="Pilih Unit ..."
                                            ShowValidationIcon="true"
                                            FilteringMode="DataGridFilteringMode.Contains"
                                            @bind-Value="@dtEdit.unit_id"
                                            TextFieldName="unit_code_name"
                                            ValueFieldName="unit_id">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Emel</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                <DxMaskedInput @bind-Value="@dtEdit.Email"
                                                CssClass="cw-320"
                                                NullText="@("_@_.__")"
                                                Mask="@(@"((\w|[.-])+@(\w|-)+\.(\w|-){2,4})?")"
                                                Maxlength="60"
                                                ShowValidationIcon="true"
                                                MaskMode="MaskMode.RegEx">
                                    <DxRegExMaskProperties MaskAutoCompleteMode="@((MaskAutoCompleteMode)AutoCompleteMode)"
                                                            Placeholder="Placeholder"
                                                            PlaceholdersVisible="PlaceholderVisible" />
                                </DxMaskedInput>
                            </td>
                        </tr>
                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>
        <TotalSummary>
            <DxGridSummaryItem FooterColumnName="UserName"
                                Name="Custom"
                                SummaryType=GridSummaryItemType.Count />
        </TotalSummary>

    </DxGrid>

</div>
</DxLoadingPanel>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>


@code {
    bool PanelVisible { get; set; }
    IEnumerable<ApplicationUser> dataSource;
    IEnumerable<ref_department> dtDepartment;
    IEnumerable<ref_division> dtSection;
    IEnumerable<ref_unit> dtUnit;

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; } 
    ApplicationUser dtData { get; set; }
    string strIdPengguna { get; set; } = string.Empty;

    IEnumerable<char> PredefinedPlaceholders { get; set; } = new List<char>() { '_', '#' };
    // string Email { get; set; }
    // string EmailMask { get; set; } = @"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*";

    MaskAutoCompleteMode AutoCompleteMode { get; set; } = MaskAutoCompleteMode.Strong;
    char Placeholder { get; set; } = '_';
    bool PlaceholderVisible { get; set; } = true;

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;

        dataSource = await _UserService.ListAll();
        dtDepartment = await _DepartmentService.ListAll();
        dtSection = await _SectionService.ListAll();
        dtUnit = await _UnitService.ListAll();

        DataLoadedTcs.TrySetResult(true);
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync(); //.StartEditRowAsync(0);
        }
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (ApplicationUser)e.EditModel;
        if (_data.full_name == null || _data.full_name.Trim() == "")
        {
            e.AddError(nameof(_data.full_name), "Nama Penuh perlu dimasukkan.");
        }

        if (_data.IdNo == null)
        {
            e.AddError(nameof(_data.IdNo), "No Kad Pengenalan perlu dimasukkan.");
        }
        else
        {
            if (_data.IdNo.Trim() == "")
                e.AddError(nameof(_data.IdNo), "No Kad Pengenalan perlu dimasukkan.");
            else
            {

                if (Grid.IsEditingNewRow())
                {
                    var _dtAdd = dataSource.Where(x => x.IdNo == _data.IdNo).FirstOrDefault();

                    if (_dtAdd != null)
                        e.AddError(nameof(_data.IdNo), "No Kad Pengenalan telah wujud.");
                    else
                    {
                        // _data.ic_no = strIdPengguna;
                        strIdPengguna = _data.IdNo;
                        _data.UserName = _data.IdNo;
                    }
                }
                else
                {
                    var _dtEdit = dataSource.Where(x => x.Id != _data.Id && x.IdNo == _data.IdNo).FirstOrDefault();

                    if (_dtEdit != null)
                        e.AddError(nameof(_data.IdNo), "No Kad Pengenalan telah wujud.");
                    else
                    {
                        // _data.ic_no = strIdPengguna;
                        strIdPengguna = _data.IdNo;
                        _data.UserName = _data.IdNo;
                    }
                }
            }
        }

        if (_data.PhoneNumber == null || _data.PhoneNumber.Trim() == "")
        {
            e.AddError(nameof(_data.PhoneNumber), "No Telefon Bimbit perlu dimasukkan.");
        }

        if (_data.dept_id == 0)
        {
            e.AddError(nameof(_data.dept_id), "Sila pilih Jabatan dari senarai.");
        }

        if (_data.div_id == 0)
        {
            e.AddError(nameof(_data.div_id), "Sila pilih Seksyen dari senarai.");
        }

        if (_data.unit_id == 0)
        {
            e.AddError(nameof(_data.unit_id), "Sila pilih Unit dari senarai.");
        }

        if (_data.Email == null || _data.Email.Trim() == "")
        {
            e.AddError(nameof(_data.Email), "Alamat Emel perlu dimasukkan.");
        }
        else
        {           
            if (Grid.IsEditingNewRow())
            {
                var _dtAdd = dataSource.Where(x => x.Email == _data.Email).FirstOrDefault();

                if (_dtAdd != null)
                    e.AddError(nameof(_data.Email), "Alamat Emel telah wujud.");
            }
            else
            {
                var _dtEdit = dataSource.Where(x => x.Id != _data.Id && x.Email == _data.Email).FirstOrDefault();

                if (_dtEdit != null)
                    e.AddError(nameof(_data.Email), "Alamat Emel telah wujud.");
            }
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        var editModel = e.EditModel as ApplicationUser;

        try
        {
            if (e.IsNew)
                response = await _UserService.Add(editModel);
            else
                response = await _UserService.Update(editModel.Id, editModel);


            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                HandleResponse("Proses kemaskini selesai.");
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task UpdateDataAsync()
    {
        //Refresh back the data source
        dataSource = await _UserService.Refresh();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(ApplicationUser item)
    {
        strSelected = item.UserName;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _UserService.Delete(dtData.Id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
        {
            ProviderName = "Overview",
            ThemeMode = ToastThemeMode.Saturated,
            RenderStyle = RenderStyle,
            Title = message
        });
    }

}