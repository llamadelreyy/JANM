@page "/sejarah_lesen"
@attribute [Authorize(Roles = "Administrator")]

@implements IDisposable

@using System.Globalization
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices
@using PBTPro.DAL.Models.PayLoads

@inject LicenseService _license
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Lesen - Senarai Sejarah Lesen</div>
    </div>
</div>

<style>
    .dxbl-grid {
        height: 79vh;
        max-height: 79vh;
    }
</style>

<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="item-container-x">
    <DxGrid @ref="Grid"
            Data="@_lstlicense"
            KeyFieldName="license_hist_id"
            ShowGroupPanel="true"
            ShowFilterRow="true"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="@ColumnResizeMode"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>
            <DxGridCommandColumn EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" Width="120px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn FieldName="@nameof(license_view.license_hist_holder)" Caption="Nama Penyewa" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(license_view.license_hist_account)" Caption="No Akaun" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(license_view.license_status)" Caption="Status Lesen" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn Caption="Tarikh & Mula dan Tamat Lesen" MinWidth="200" Width="20%" FieldName="tarikh" TextAlignment="GridTextAlignment.Left" AllowGroup="false">
                <CellDisplayTemplate>
                    <div>
                        @CombineText(Convert.ToDateTime(((license_view)context.DataItem).license_hist_startd), Convert.ToDateTime(((license_view)context.DataItem).license_hist_endd))
                    </div>
                </CellDisplayTemplate>
            </DxGridDataColumn>           
            <DxGridDataColumn FieldName=@nameof(license_view.created_date)
                              DisplayFormat="dd/MM/yyyy"
                              Caption="Tarikh Pembaharuan Lesen"
                              MinWidth="120"
                              Width="20%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0" />
        </Columns>       
    </DxGrid>   
</div>

@code {
    private List<license_history> _lstlicenseHistory = new List<license_history>();
    private List<license_view> _lstlicense = new List<license_view>();
    license_history dtData { get; set; }
    license_view _dtData { get; set; }
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    #region list
    protected override async Task OnInitializedAsync()
    {
        _lstlicense = await _license.GetHistoryLicenseAsync();
        try
        {  _lstlicense = await _license.ListAll();  }
        catch (Exception ex)
        { Console.Error.WriteLine($"Error loading actions: {ex.Message}"); }
        DataLoadedTcs.TrySetResult(true);
    }        

    async Task UpdateDataAsync()
    {
        _lstlicense = await _license.Refresh();
    }
   #endregion

    #region delete
    async Task Delete(license_view item)
    {
        _dtData = item;
    }      

   #endregion

    #region lookup
    public MarkupString CombineText(DateTime startDtm, DateTime EndDtm)
    {
        string html = string.Format("<b>TARIKH:</b> {0} - {1} ", startDtm.ToString("dd/MM/yyyy"), EndDtm.ToString("dd/MM/yyyy"));
        return new MarkupString(html);
    }
    #endregion

    #region response
    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion

   
}
