@*
Project: PBT Pro
Description: Page of Emailer Configuration
Author: Ismail
Date: January 2025
Version: 1.0

Additional Notes:
-

Changes Logs:
21/01/2025 - initial create
*@
@page "/setup_emailer"
@attribute [Authorize]
@using PBTPro.DAL.Services
@inject PBTAuthPermissionService PermissionService
@inject IToastNotificationService ToastService
@inject EmailerService _EmailerService
@inject NavigationManager Navigation
@using Newtonsoft.Json
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices
@using PBTPro.DAL.Models.PayLoads
@using System.Text


@if (!PermissionService.HasPermission("View"))
{
    Navigation.NavigateTo("/no-permission");
}
else
{
    <div class="d-lg-flex border-bottom mb-2">
        <div class="col-md-12 py-1 dx-helptitle pageTitle">
            <img class="imgTitle" src="/images/icons/information.png" />
            <div class="textTitle">Konfigurasi Pelayan Emel</div>
        </div>
    </div>

    <div class="item-container-x">
        <div class="ProfileBox" style="border:solid 1px #999;border-radius: 5px;box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.25);">
            <div class="card-body">
                <EditForm Model="@emailConfig" OnValidSubmit="@HandleValidSubmit" Context="EditFormContext">
                    <DataAnnotationsValidator />
                    <DxFormLayout>
                        <DxFormLayoutItem ColSpanMd="4">
                            <div>Email Penghantar</div>
                            <DxTextBox @bind-Text="@emailConfig.From"
                            NullText="Email Penghantar ..."
                            BindValueMode="BindValueMode.OnInput"
                            ShowValidationIcon="true"
                            CssClass="cw-480" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanMd="4">
                            <div>Nama Pengguna</div>
                            <DxTextBox @bind-Text="@emailConfig.UserName"
                            NullText="Nama Pengguna ..."
                            BindValueMode="BindValueMode.OnInput"
                            ShowValidationIcon="true"
                            CssClass="cw-480" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanMd="4">
                            <div>Katalalauan</div>
                            <DxTextBox @bind-Text="@emailConfig.Password"
                            NullText="Katalaluan ..."
                            BindValueMode="BindValueMode.OnInput"
                            ShowValidationIcon="true"
                            CssClass="cw-480" style="width:180px;" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanMd="4">
                            <div>Pelayan Email</div>
                            <DxTextBox @bind-Text="@emailConfig.SmtpServer"
                            NullText="Pelayan Email ..."
                            BindValueMode="BindValueMode.OnInput"
                            ShowValidationIcon="true"
                            CssClass="cw-480" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanMd="4">
                            <div>Port</div>
                            <DxSpinEdit @bind-Value="@emailConfig.Port"
                            NullText="587"
                            ShowValidationIcon="true" CssClass="cw-480" style="width:120px;" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="4"></DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanMd="4">
                            <div>Mengguna SSL</div>
                            <DxCheckBox @bind-Checked="@emailConfig.EnableSsl" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem ColSpanMd="12"><hr /></DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12">
                            @if (PermissionService.HasPermission("Execute"))
                            {
                                <DxButton Text="Hantar Email Ujian"
                                          class="btn-edit-grid"
                                Enabled="true"
                                SubmitFormOnClick="false"
                                Click="OnExecuteButtonClick">
                                </DxButton>
                            }
                            @if (PermissionService.HasPermission("Add") || PermissionService.HasPermission("Edit"))
                            {
                                <DxButton Text="Simpan"
                                          class="btn-edit-grid"
                                Enabled="true"
                                SubmitFormOnClick="true">
                                </DxButton>
                            }
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>

            </div>
        </div>
    </div>

    <DxPopup @bind-Visible="@SentTestMailShown" HeaderText="Hantar Email Ujian" CloseOnOutsideClick="false">
        <BodyTemplate Context="PopupContext">
            <div class="card-body">
                <EditForm Model="@STMModel"
                          Context="STMFormContext" OnValidSubmit="@OnSTMYesButtonClick">
                    <DataAnnotationsValidator />
                    <DxFormLayout>
                        <DxFormLayoutItem ColSpanMd="12">
                            <div>Email Penerima</div>
                            <DxTextBox @bind-Text="@STMModel.Receipient"
                            NullText="Email Penerima ..."
                            BindValueMode="BindValueMode.OnInput"
                                       ValidationEnabled="true"
                            ShowValidationIcon="true"
                                       ShowValidationSuccessState="true"
                            CssClass="cw-480" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12"><hr /></DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12">
                            <DxButton Text="Teruskan" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
                            <DxButton Text="Batal" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnSTMNoButtonClick" SubmitFormOnClick="false" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>
            </div>
        </BodyTemplate>
    </DxPopup>
}

@code {
    EmailConfiguration emailConfig = new EmailConfiguration();
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        emailConfig = await _EmailerService.GetEmailConfig();
    }

    #region Add/Edit
    async Task HandleValidSubmit()
    {
        try
        {

            ReturnViewModel response = new ReturnViewModel();            
            response = await _EmailerService.SaveEmailConfig(emailConfig);

            if (response.ReturnCode == 200)
            {
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Test Email Configuration
    EmailConfigurationTestMail STMModel = new EmailConfigurationTestMail();
    EditContext STMFormContext;
    bool SentTestMailShown { get; set; } = false;
    DxTextBox SMTReceiver { get; set; }
    EditForm STMForm;

    async void OnSTMYesButtonClick()
    {
        try
        {
            var inputModel = STMFormContext.Model as EmailConfigurationTestMail;
            ReturnViewModel response = new ReturnViewModel();
            response = await _EmailerService.TestEmailConfig(inputModel);

            if (response.ReturnCode == 200)
            {
                SentTestMailShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {

        }
    }

    void OnSTMNoButtonClick()
    {
        SentTestMailShown = false;
        StateHasChanged();
    }

    private async Task OnExecuteButtonClick()
    {
        STMFormContext = new EditContext(STMModel);
        SentTestMailShown = true;
        StateHasChanged();
        /*
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _EmailerService.TestEmailConfig("xyz");

            if (response.ReturnCode == 200)
            {
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {

        }
        */
    }
    #endregion
    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
}