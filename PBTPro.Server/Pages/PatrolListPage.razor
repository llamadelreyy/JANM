@page "/senarai_rondaan"
@attribute [Authorize(Roles = "Administrator")]

@implements IDisposable

@using System.Globalization
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices
@using PBTPro.DAL.Services

@inject PatrolService _patrolling
@inject DepartmentService _department
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Rondaan - Senarai Jadual Rondaan</div>
    </div>
</div>

<style>
    .dxbl-grid {
        height: 79vh;
        max-height: 79vh;
    }
</style>

<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="item-container-x">
    <DxTabs ActiveTabIndex="@ActiveTabIndex" ActiveTabIndexChanged="@OnActiveTabIndexChanged" TabsPosition="TabsPosition.Top" RenderMode="TabsRenderMode.Default">
        @{
            // var combine = "";
            // var count=0;

            // var Items = lstActiveIndex.Where(c => c.active_flag == true).OrderBy(item => item.patrol_status).GroupBy(item => item.patrol_status).ToList();

            // @foreach (var itm in Items)
            // {
            //     // combine = @itm.Key + " (" + count + ")";
            //     count = @itm.Count();
            //     // <DxTab Text="@combine"></DxTab>
            // }

            var belummula = $"Belum Mula ({result})";
            var rondaan = $"Rondaan ({result1})";
            var selesai = $"Selesai ({result2})";

            <DxTab Text="@belummula"></DxTab>
            <DxTab Text="@rondaan"></DxTab>
            <DxTab Text="@selesai"></DxTab>
        }
    </DxTabs>
    <DxGrid @ref="Grid"
            Data="@DataSource"
            ShowGroupPanel="true"
            ShowFilterRow="true"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>
            <DxGridCommandColumn EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" Width="120px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((patrol_info)context.DataItem))" style="text-decoration: none;padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_officer_name)" Caption="Nama Pegawai" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false">
                <CellDisplayTemplate>
                    <div>
                        @CombineTextPegawai(((patrol_info)context.DataItem).patrol_officer_name, ((patrol_info)context.DataItem).patrol_dept_name)
                    </div>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_location)" Caption="Lokasi Rondaan" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn Caption="Tarikh & Masa Mula dan Tamat Rondaan" MinWidth="200" Width="40%" FieldName="tarikh" TextAlignment="GridTextAlignment.Left" AllowGroup="false">
                <CellDisplayTemplate>
                    <div>
                        @CombineText(Convert.ToDateTime(((patrol_info)context.DataItem).patrol_start_dtm), Convert.ToDateTime(((patrol_info)context.DataItem).patrol_end_dtm), Convert.ToDateTime(((patrol_info)context.DataItem).patrol_start_dtm), Convert.ToDateTime(((patrol_info)context.DataItem).patrol_end_dtm))
                    </div>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_status)" Caption="Status Rondaan" Width="20%" TextAlignment="GridTextAlignment.Center" AllowGroup="false">
                <CellDisplayTemplate>
                    <div>@GetStatusRondaanIconHtml(((patrol_info)context.DataItem).patrol_status)</div>
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>

        <EditFormTemplate Context="editFormContext">
            @{
                var dtData = (patrol_info)editFormContext.EditModel;
                var editContext = new EditContext(dtData);
            }
            <DxFormLayout EditContext="editContext" CssClass="w-100">
                <DxFormLayoutItem Caption="patrol_id" ColSpanMd="6" Visible="false">
                    <DxTextBox @bind-Value="@dtData.patrol_id" ReadOnly="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="3" BeginRow="true">
                    <table class="">
                        <tr>
                            <td nowrap>Jabatan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@dtDept"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Jabatan..."
                                            @bind-Value="@SelectedDepartment"
                                            TextFieldName="@nameof(department_info.dept_name)" />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Nama Pegawai</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@namapegawai"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Nama Pegawai..."
                                            @bind-Value="@dtData.patrol_officer_name"
                                            @bind-Text="@dtData.patrol_officer_name">
                                </DxComboBox>
                                @* <DxComboBox Data="@dtOfficerName"
                                @bind-Value="@ValueOfficerName"
                                NullText="Pilih Nama Pegawai..."
                                TextFieldName="@nameof(patrol_scheduler.scheduler_officer)"
                                ShowValidationIcon="true"
                                onchange="OnOfficerNameChanged">
                                </DxComboBox>  *@
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Lokasi Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@lokasirondaan"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Lokasi Rondaan..."
                                            @bind-Value="@dtData.patrol_location"
                                            @bind-Text="@dtData.patrol_location">
                                </DxComboBox>
                                @* <DxComboBox Data="@dtLocation"
                                @bind-Value="@ValueLocation"
                                NullText="Pilih Lokasi Rondaan..."
                                TextFieldName="@nameof(patrol_scheduler.scheduler_location)"
                                ShowValidationIcon="true">
                                </DxComboBox> *@
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Masa Mula Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%">
                                <DxDateEdit @bind-Date="@dtData.patrol_start_dtm"
                                            TimeSectionVisible="true"
                                            CssClass="cw-320"
                                            InputId="deStartTimeSection" />
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Masa Tamat Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%">
                                <DxDateEdit @bind-Date="@dtData.patrol_end_dtm"
                                            TimeSectionVisible="true"
                                            CssClass="cw-320"
                                            InputId="deEndTimeSection" />
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Status Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@patrollingStatusOptions"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Status..."
                                            @bind-Value="@dtData.patrol_status"
                                            @bind-Text="@dtData.patrol_status">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>
                        <tr style="height:1px;background-color:#ccc;"><td colspan="7"></td></tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>

                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>

    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
        <BodyContentTemplate>
            Anda pasti untuk menghapuskan rekod ini?
            <br /><br />
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
                <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>

</div>
@code {
    private List<patrol_info> lstActiveIndex = new List<patrol_info>();
    public List<(patrol_info, int)> Items { get; set; } = new List<(patrol_info, int)>();
    IEnumerable<patrol_info> DataSource;
    IEnumerable<ref_department> dtDept { get; set; }
    patrol_info dtDatas { get; set; }
    ref_department SelectedDepartment { get; set; }
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    bool ConfirmationShown { get; set; } = false;
    private string tabType = "Belum Mula";
    int ActiveTabIndex;
    int result; int result1; int result2;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    #region List
    protected override async Task OnInitializedAsync()
    {
        DataSource = await GetListDataAsync(tabType);

        #region get all and count by patrol status
        lstActiveIndex = await _patrolling.ListAll();
        result = lstActiveIndex.Count(a => a.patrol_status == "Belum Mula");
        result1 = lstActiveIndex.Count(a => a.patrol_status == "Rondaan");
        result2 = lstActiveIndex.Count(a => a.patrol_status == "Selesai");
        #endregion

        #region lookup department list
        dtDept = await _department.ListAll();
        SelectedDepartment = dtDept.FirstOrDefault();
        #endregion

        DataLoadedTcs.TrySetResult(true);
    }

    private async Task OnActiveTabIndexChanged(int index)
    {
        ActiveTabIndex = index;        
        switch (ActiveTabIndex)
        {
            case 0:
                tabType = "Belum Mula";
                break;
            case 1:
                tabType = "Rondaan";
                break;
            case 2:
                tabType = "Selesai";
                break;
            default :
                tabType = "Belum Mula";
                break;
        }

        DataSource = await GetListDataAsync(tabType);
        StateHasChanged();
    }

    private async Task<IEnumerable<patrol_info>> GetListDataAsync(string? TabType = "")
    {
        return await _patrolling.ListByTabType(tabType);
    }   

    async Task UpdateDataAsync()
    {
        DataSource = await _patrolling.Refresh();
    }

    #endregion

    #region add/edit/delete
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            var inputModel = e.EditModel as patrol_info;

            if (e.IsNew)
            {
                int? dtIdMax;
                if (lstActiveIndex.Any())
                {
                    dtIdMax = lstActiveIndex.OrderByDescending(x => x.patrol_id).FirstOrDefault()?.patrol_id;
                    if (dtIdMax.HasValue)
                    {
                        dtIdMax++;
                    }
                }
                else
                {
                    dtIdMax = 1;
                }
                // inputModel.patrol_id = dtIdMax ?? 0;
                inputModel.patrol_dept_name = SelectedDepartment.dept_name;
                inputModel.patrol_status = inputModel.patrol_status;
                inputModel.created_date = DateTime.Now;
                inputModel.active_flag = true;
                response = await _patrolling.Add(inputModel);
            }
            else
            {
                response = await _patrolling.Update(inputModel);
            }

            if (response.ReturnCode == 200)
            {
                DataSource = await GetListDataAsync(tabType);
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
            else
            {
                e.Cancel = true;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task Delete(patrol_info item)
    {
        dtDatas = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _patrolling.Delete(dtDatas.patrol_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
        dtDatas = null;
    }

    void OnNoButtonClick()
    {
        dtDatas = null;
        ConfirmationShown = false;
    }

    #endregion

    #region lookup data
    private List<string> jabatan = new List<string>
    {
        "Jabatan Perlesenan",
        "Jabatan Kesihatan",
        "Jabatan Penguatkuasaan"
    };

    private List<string> namapegawai = new List<string>
    {
        "Mohd Zaki",
        "Siti Aminah",
        "Mohd Ali",
        "AZIZUL HASNI AWANG"
    };

    private List<string> lokasirondaan = new List<string>
    {
        "Telok Gong",
        "Bukit Raja",
        "Bukit Jalil",
        "Puchong Jaya",
        "Sri Petaling",
    };

    private List<string> patrollingStatusOptions = new List<string>
    {
        "Belum Mula",
        "Rondaan",
        "Selesai"
    };
    #endregion

    #region MarkupString
    public MarkupString GetStatusRondaanIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Selesai")
        {
            priorytyClass = "info";
            title = " SELESAI ";
        }
        else if (status == "Rondaan")
        {
            priorytyClass = "warning";
            title = " RONDAAN ";
        }
        else
        {
            priorytyClass = "danger";
            title = " BELUM MULA ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass, title);
        return new MarkupString(html);
    }

    public MarkupString CombineText(DateTime startDtm, DateTime EndDtm, DateTime startTm, DateTime EndTm)
    {
        string html = string.Format("<b>TARIKH:</b> {0} - {1} <br/> <b>MASA:</b> {2} - {3} ", startDtm.ToString("dd/MM/yyyy"), EndDtm.ToString("dd/MM/yyyy"), startTm.ToString("HH:mm tt"), EndTm.ToString("HH:mm tt"));
        return new MarkupString(html);
    }

    public MarkupString CombineTextPegawai(string strNama, string strjabatan)
    {
        string html = string.Format("{0} <br/> {1}", strNama.ToUpper(), strjabatan.ToUpper());
        return new MarkupString(html);
    }
    #endregion

    #region response
    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion

}
