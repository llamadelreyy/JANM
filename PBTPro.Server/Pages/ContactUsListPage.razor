@*
Project: PBT Pro
Description: Page of Soalan Lazim
Author: Farhana
Date: January 2025
Version: 1.0

Changes Logs:
10/01/2025 - initial create
*@

@page "/senarai_hubungikami"
@attribute [Authorize]

@implements IDisposable

@using System.Globalization
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject PBTAuthPermissionService PermissionService
@inject ContactUsService _contactus
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService
@inject PBTAuthPermissionService PermissionService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

@if (!PermissionService.HasPermission("View"))
{
    NavigationManager.NavigateTo("/no-permission");
}
else
{
    <DxLoadingPanel @bind-Visible="PanelVisible"
    IsContentBlocked="true"
    ApplyBackgroundShading="true"
    IndicatorAreaVisible="false"
    Text="Capaian Data...">

        <div class="d-lg-flex border-bottom">
            <div class="col-md-12 py-1 dx-helptitle pageTitle">
                <img class="imgTitle" src="\images\icons-small\document-task.png" />
                <div class="textTitle">Hubungi Kami</div>
            </div>
        </div>

        <div class="item-container-x">

            <DxGrid @ref="Grid"
            Data="@_lstcontact"
            KeyFieldName="contact_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

                <Columns>

                    <DxGridCommandColumn Width="55px">
                        <HeaderTemplate>
                            @if (PermissionService.HasPermission("Add"))
                            {
                                <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                            }
                        </HeaderTemplate>
                        <CellDisplayTemplate>
                            @if (PermissionService.HasPermission("Edit"))
                            {
                                <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                            }
                            @if (PermissionService.HasPermission("Delete"))
                            {
                                <a @onclick="@(() => Delete((contact_us)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                            }
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>
                    <DxGridDataColumn FieldName="@nameof(contact_us.contact_inq_no)" Caption="Tiket No" Width="20%" TextAlignment="GridTextAlignment.Left" />
                    <DxGridDataColumn FieldName="@nameof(contact_us.contact_name)" Caption="Nama" Width="23%" TextAlignment="GridTextAlignment.Left" />
                    <DxGridDataColumn FieldName="@nameof(contact_us.contact_email)" Caption="Emel" Width="25%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
                    <DxGridDataColumn FieldName="@nameof(contact_us.contact_status)" Caption="Status Tiket" Width="20%" TextAlignment="GridTextAlignment.Center">
                        <CellDisplayTemplate>
                            <div>@GetStatusIconHtml(((contact_us)context.DataItem).contact_status)</div>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn FieldName=@nameof(contact_us.created_at)
                                      DisplayFormat="dd/MM/yyyy"
                                      Caption="Tarikh Data"
                                      MinWidth="120"
                                      Width="12%"
                                      TextAlignment="GridTextAlignment.Center"
                                      SortOrder="GridColumnSortOrder.Ascending"
                                      SortIndex="0" />
                </Columns>

                <EditFormTemplate Context="editFormContext">
                    @{
                        var dtData = (contact_us)editFormContext.EditModel;
                    }
                    <DxFormLayout CssClass="w-100" style="padding:10px 20px;">
                        <DxFormLayoutItem ColSpanMd="4" BeginRow="true">
                            <table class="layout_edit">
                                <tr>
                                    <td nowrap>Nama</td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="7">
                                        <DxTextBox @bind-Text="@dtData.contact_name" ReadOnly />
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Emel</td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="7">
                                        <DxTextBox @bind-Text="@dtData.contact_email" ReadOnly />
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>No Telefon</td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="7">
                                        <DxTextBox @bind-Text="@dtData.contact_telno" ReadOnly style="width:120px" />
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Subjek</td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="7">
                                        <DxTextBox @bind-Text="@dtData.contact_subject" ReadOnly />
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Catatan</td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="7">
                                        <DxMemo @bind-Text="@dtData.contact_message" ReadOnly />
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Status Tiket</td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="7">
                                        @{
                                            if (dtData.contact_status != "Selesai")
                                            {
                                                <DxComboBox Data="@StatusOptions"
                                                            ShowValidationIcon="true"
                                                            NullText="Pilih Status..."
                                                            @bind-Value="@dtData.contact_status"
                                                            CssClass="cw-320" 
                                                            style="width:350px;">
                                                </DxComboBox>
                                            }
                                            else{
                                                <DxComboBox Data="@StatusOptions"
                                                            ShowValidationIcon="true"
                                                            NullText="Pilih Status..."
                                                            @bind-Value="@dtData.contact_status"
                                                            CssClass="cw-320" 
                                                            style="width:350px;" 
                                                            Enabled="false">
                                                </DxComboBox>
                                            }
                                        }
                                    </td>
                                </tr>
                            </table>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12">
                            <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                            <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
                <CustomValidators>
                    <MyCustomValidator DataItemValidating="ValidateGridData" />
                </CustomValidators>

                @*This is to count the summary*@
                <TotalSummary>
                    <DxGridSummaryItem FooterColumnName="contact_status"
                                       Name="Custom"
                                       SummaryType=GridSummaryItemType.Count />
                </TotalSummary>

            </DxGrid>

        </div>
    </DxLoadingPanel>

    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
        <BodyContentTemplate>
            Anda pasti untuk menghapuskan rekod ini?
            <br /><br />
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
                <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>
}
@code {
    bool PanelVisible { get; set; }

    private List<contact_us> _lstcontact = new List<contact_us>();
    contact_us dtData { get; set; }
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";
    bool ConfirmationShown { get; set; } = false;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    #region list
    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        _lstcontact = await _contactus.GetContactUsAsync();
        try
        {
            _lstcontact = await _contactus.ListAll();
            DataLoadedTcs.TrySetResult(true);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading actions: {ex.Message}");
        }
        PanelVisible = false;
    }

    async Task UpdateDataAsync()
    {
        _lstcontact = await _contactus.Refresh();
    }
    #endregion

    #region add/edit/delete
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        var editModel = e.EditModel as contact_us;
        try
        {
            if (e.IsNew)
            {
                response = await _contactus.Add(editModel);
            }
            else
            {
                response = await _contactus.Update(editModel.contact_id, editModel);
            }
            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task Delete(contact_us item)
    {
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _contactus.Delete(dtData.contact_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
    }

    void OnNoButtonClick()
    {
        dtData = null;
        ConfirmationShown = false;
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (contact_us)e.EditModel;
        if (_data.contact_status == null)
        {
            e.AddError(nameof(_data.contact_status), "Status tidak sah. Medan perlu diisi.");
        }
    }
    #endregion

    #region lookup
    public MarkupString GetStatusIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Menunggu")
        {
            priorytyClass = "danger";
            title = " MENUNGGU ";
        }
        else if (status == "Dalam Proses")
        {
            priorytyClass = "warning";
            title = " DALAM PROSES ";
        }
        else if (status == "Selesai")
        {
            priorytyClass = "info";
            title = " SELESAI ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass,
        title);
        return new MarkupString(html);
    }

    private List<string> StatusOptions = new List<string>
    {
        "Menunggu",
        "Dalam Proses",
        "Selesai"
    };

    #endregion

    #region response
    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion
}
