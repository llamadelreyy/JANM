@page "/user_access"
@attribute [AllowAnonymous]

@using Microsoft.AspNetCore.Identity
@using PBTPro.DAL
@using PBTPro.Data
@using PBTPro.DAL.Models

@inject RoleMenuService _RoleMenuService
@inject MenuService _MenuService
@inject RoleService _RoleService
@inject PermissionService _PermissionService
@inject NavigationManager NavigationManager
@inject PBTAuthPermissionService PermissionService
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

@if (!PermissionService.HasPermission("View"))
{
    NavigationManager.NavigateTo("/no-permission");
}
else
{
    <DxLoadingPanel @bind-Visible="PanelVisible"
    IsContentBlocked="true"
    ApplyBackgroundShading="true"
    IndicatorAreaVisible="false"
    Text="Capaian Data...">

        <div class="d-lg-flex border-bottom">
            <div class="col-md-12 py-1 dx-helptitle pageTitle">
                <img class="imgTitle" src="\images\icons-small\blue-document-tree.png" />
                <div class="textTitle">Akses Peranan</div>
            </div>
        </div>

        <div class="item-container-x">

            <DxGrid @ref="Grid"
            Data="dataSource"
            KeyFieldName="_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Never"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="50"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 50, 100, 200 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

                <Columns>
                    <DxGridCommandColumn Width="0px">
                        <HeaderTemplate>
                            @if ((PermissionService.HasPermission("Add")) || (PermissionService.HasPermission("Edit")))
                            {
                                <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                            }
                        </HeaderTemplate>
                        <CellDisplayTemplate>
                            @{
                                //if (!boolStartEdit)
                                //{
                                // boolMarkOnce = false;
                                // boolPopulateOnce = false;
                                // strSelectedMenu = "";
                                // boolEditMode = false;
                                //<a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                                // <a @onclick="@(() => Delete((role_menu)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                                //}
                            }
                        </CellDisplayTemplate> 
                    </DxGridCommandColumn>
                    <DxGridDataColumn Caption="Peranan" MinWidth="140" Width="18%" GroupIndex="0" FieldName="role_name" />
                    <DxGridDataColumn Caption="Kategori" MinWidth="100" Width="14%" GroupIndex="1" FieldName="menu_name" TextAlignment="GridTextAlignment.Left" SortOrder="GridColumnSortOrder.Descending" />
                    <DxGridDataColumn Caption="Menu" MinWidth="160" Width="20%" FieldName="submenu_name" TextAlignment="GridTextAlignment.Left" AllowGroup="false" AllowSort="false" />
                    <DxGridDataColumn Caption="Papar" MinWidth="55" Width="3%" FieldName="bln_read" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Tambah" MinWidth="70" Width="4%" FieldName="bln_create" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Ubah" MinWidth="50" Width="3%" FieldName="bln_update" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Hapus" MinWidth="60" Width="3%" FieldName="bln_delete" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Cetak" MinWidth="60" Width="3%" FieldName="bln_print" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Muat Naik" MinWidth="55" Width="3%" FieldName="bln_upload" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Muat Turun" MinWidth="60" Width="3%" FieldName="bln_download" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Import Data" MinWidth="70" Width="4%" FieldName="bln_import_data" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Eksport Data" MinWidth="70" Width="4%" FieldName="bln_export_data" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Pengesahan" MinWidth="100" Width="5%" FieldName="bln_authorize" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Luluskan Perubahan" MinWidth="100" Width="5%" FieldName="bln_approve_changes" TextAlignment="GridTextAlignment.Center" />
                    <DxGridDataColumn Caption="Perlaksanaan" MinWidth="120" Width="5%" FieldName="bln_execute" TextAlignment="GridTextAlignment.Center" />

                    <DxGridDataColumn FieldName="created_date"
                    DisplayFormat="dd/MM/yyyy"
                    Caption="Tarikh Data"
                    MinWidth="90"
                    Width="10%"
                    TextAlignment="GridTextAlignment.Center">
                        <FilterMenuTemplate>
                            <DateRange FilterContext="context" />
                        </FilterMenuTemplate>
                    </DxGridDataColumn>
                </Columns>

                <EditFormTemplate Context="EditFormContext">
                    @{
                        // This is to check whether in add new @ edit mode
                        if ((!boolEditMode) && (!boolPopulateOnce))
                        //if ((!boolPopulateOnce))
                        {
                            var dtEdit = (role_menu)EditFormContext.EditModel;
                            //var MenuContent = _dtContent; //FileMenu.Content;

                            // This is to check whether in add new @ edit mode
                            boolEditMode = Grid.IsEditingNewRow();
                            // // // intCurrentRoleId = dtEdit.role_id;


                            // // // // MyTreeView.ClearCheck();
                            // // // OnPopulateRoleMenu();
                            // This is to marked that tree view is already populate
                            boolPopulateOnce = true;
                        }
                    }

                    <DxFormLayout CssClass="w-100">
                        <DxFormLayoutItem ColSpanMd="6" BeginRow="true">
                            <table class="layout_edit">
                                <tr hidden="@boolErrorMessage">
                                    <td style="color:red;" colspan="8">
                                        <img src="images/icons-small/exclamation-red.png" /> Sila pilih menu dari senarai.
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Peranan</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%">
                                        <DxComboBox Data="@dataRole"
                                        NullText="Pilih Peranan ..."
                                        Enabled="@boolEditMode"
                                        SearchFilterCondition="ListSearchFilterCondition.Contains"
                                        ShowValidationIcon="true"
                                        SelectedDataItemChanged="(SelectedDataItemChangedEventArgs<ApplicationRole> args) => OnSelectedRoleChanged(args)"
                                        TextFieldName="Name"
                                        ValueFieldName="Id"
                                        @bind-Value="@intCurrentRoleId">
                                        </DxComboBox>
                                    </td>
                                    <td width="100px">&nbsp;</td>
                                    <td nowrap></td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%"></td>
                                </tr>
                                <tr>
                                    <td nowrap>Menu</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="6">
                                        @*                             <DxLoadingPanel @bind-Visible="PanelTree"
                                IsContentBlocked="true"
                                ApplyBackgroundShading="true"
                                IndicatorAreaVisible="false"
                                Text="Isi Data..."> *@

                                        <div class="cw-320" id="menuAccess" style="height:280px;overflow-x:hidden;border:1px solid #ccc;">
                                            <DxTreeView Data="@_dtContent"
                                            @ref="@MyTreeView"
                                            CheckMode="TreeViewCheckMode.Recursive"
                                            CheckAllVisible="false"
                                            CheckedChanged="CheckedChanged"
                                            AllowSelectNodes="true"
                                            CheckNodeByClick="true"
                                            AnimationType="LayoutAnimationType.Slide"
                                            CssClass="h-300">
                                                <DataMappings>
                                                    <DxTreeViewDataMapping Children="Content"
                                                    Text="Name"
                                                    IconUrl="IconUrl"
                                                    CssClass="cssClass"
                                                    Checked="Selected"
                                                    IconCssClass="IconCssClass" />
                                                </DataMappings>
                                            </DxTreeView>
                                        </div>
                                        @{

                                            // if (MyTreeView != null)
                                            // {
                                            //     if (!boolMarkOnce)
                                            //         OnPopulateSelectedMenu();
                                            // }

                                        }
                                        @* </DxLoadingPanel>*@
                                    </td>
                                </tr>

                            </table>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12">
                        <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                        @*<DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />*@
                        <DxButton Click="OnCancelEditClick" class="btn-edit-grid" Text="Batal" />
                    </DxFormLayoutItem>
                </DxFormLayout>

            </EditFormTemplate>

            <CustomValidators>
                <MyCustomValidator DataItemValidating="ValidateGridData" />
            </CustomValidators>

            @*This is to count the summary*@
            <TotalSummary>
                <DxGridSummaryItem FooterColumnName="role_name"
                                   Name="Custom"
                                   SummaryType=GridSummaryItemType.Count />
            </TotalSummary>

        </DxGrid>
    </div>

    </DxLoadingPanel>
}

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>


@code {
    bool PanelVisible { get; set; }
    // bool PanelTree { get; set; }

    IEnumerable<role_menu> dataSource;
    IEnumerable<ApplicationRole> dataRole;
    //IEnumerable<ApplicationRole> dataRole1;
    List<role_menu> _RoleMenu { get; set; }

    DxTreeView MyTreeView;
    IReadOnlyList<ITreeViewNodeInfo> checkedMenus;
    // IReadOnlyList<ITreeViewNodeInfo> lastCheckItems;

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    // This is to check whether in add new @ edit mode
    bool boolEditMode { get; set; } = false;
    bool boolPopulateOnce { get; set; } = false;
    bool boolMarkOnce { get; set; } = false;

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }
    bool boolErrorMessage { get; set; } = true;
    int intCurrentRoleId { get; set; }
    role_menu dtData { get; set; }

    private List<menu> parents;
    private List<role_menu> _dtMenu { get; set; }
    private List<FileMenuObject> _dtContent { get; set; }

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    int count = 0;
    string strSelectedMenu { get; set; } = "";

    private async Task OnCancelEditClick()
    {
        await Grid.CancelEditAsync();

        boolMarkOnce = false;
        boolPopulateOnce = false;
        strSelectedMenu = "";
        boolEditMode = false;
    }

    void CheckedChanged(TreeViewCheckedChangedEventArgs e)
    {
        int intChecked = 0;
        count = e.CheckedItems.Count;


        if (e.CheckedItems != null)
        //if (e.LastCheckedItems.Count > 0)
        {
            checkedMenus = e.CheckedItems;
            //var currentCheckedItem = e.LastCheckedItems[0];
            // intChecked = checkedMenus.Count;
            //checkedMenus = e.LastCheckedItems;
        }

        if (count > 0)
        //if (intChecked > 0)
        {
            // var dataItem = (FileMenuObject)checkedMenus[count - 1].DataItem;
            var lastCheckedNode = e.LastCheckedItems.LastOrDefault();
            var dataItem = (FileMenuObject)e.CheckedItems.FirstOrDefault().DataItem;
            if (lastCheckedNode != null)
                dataItem = (FileMenuObject)e.LastCheckedItems.LastOrDefault().DataItem;

            //var dataItem = (FileMenuObject)currentCheckedItem.DataItem;
            //var data = lastCheckItems[0].DataItem;
            var dataParent = dataItem;
            if (dataItem.Content != null)
                dataParent = dataItem.Content[0];

            //Check if user check Tambah, Ubah, Hapus and Print - make the Papar automatically checked
            if ((dataItem.MenuId == "2") || (dataItem.MenuId == "3") || (dataItem.MenuId == "4") || (dataItem.MenuId == "5") || (dataItem.MenuId == "6") || (dataItem.MenuId == "7") || (dataItem.MenuId == "8") || (dataItem.MenuId == "9") || (dataItem.MenuId == "10") || (dataItem.MenuId == "11") || (dataItem.MenuId == "12"))
            {
                //MyTreeView.SetNodesChecked(n => (n.DataItem as FileMenuObject).ParentId == dataItem.ParentId && (n.DataItem as FileMenuObject).MenuId == "1", true);
                MyTreeView.SetNodesChecked(n => (n.DataItem as FileMenuObject).ParentId == dataParent.ParentId && (n.DataItem as FileMenuObject).MenuId == "1", true);
            }

        }
    }

    // void SelectionChanged(TreeViewNodeEventArgs e)
    // {
    //     SelectedGroup = e.NodeInfo.Text;
    //     var data = e.NodeInfo.DataItem;
    //     InvokeAsync(StateHasChanged);
    // }

    void OnSelectedRoleChanged(SelectedDataItemChangedEventArgs<ApplicationRole> args)
    {
        // PanelTree = true;
        if (Grid.IsEditingNewRow())
        {
            boolMarkOnce = false;
            boolPopulateOnce = false;
            strSelectedMenu = "";
            boolEditMode = false;
            if (MyTreeView != null)
                MyTreeView.ClearCheck();


            // if (intCurrentRoleId != args.DataItem.Id)
            // {   
            intCurrentRoleId = args.DataItem.Id;
            OnPopulateRoleMenu();
            // }

            OnPopulateSelectedMenu();
            // PanelTree = false;
        }
    }

    void OnPopulateRoleMenu()
    {

        //Filter only the role
        var lstMenu = dataSource.Where(c => c.role_id == intCurrentRoleId);

        foreach (var item in _dtContent)
        {
            if (item.IsMenu)
            {
                foreach (var menu2 in item.Content)
                {
                    if (menu2.IsMenu)
                    {
                        foreach (var menu3 in menu2.Content)
                        {
                            foreach (var _dt in lstMenu)
                            {
                                //Papar
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_read ? "1" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Tambah
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_create ? "2" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Ubah
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_update ? "3" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Hapus
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_delete ? "4" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Cetak
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_print ? "5" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //upload
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_upload ? "6" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //download
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_download ? "7" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //import
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_import_data ? "8" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //export
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_export_data ? "9" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Pengesahan
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_authorize ? "10" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Luluskan Perubahan
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_approve_changes ? "11" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }

                                //Laksanakan
                                if ((_dt.menu_id.ToString() == menu3.ParentId) && (menu3.MenuId.ToString() == (_dt.bln_execute ? "12" : "0")))
                                {
                                    strSelectedMenu = menu3.ParentId + "-" + menu3.MenuId + "; " + strSelectedMenu;
                                }
                            }

                            // if ((menu3.ParentId == "301") && (menu3.MenuId == "2"))
                            // {
                            //     //menu3.Selected = true;
                            //     strSelectedMenu = " - [" + menu3.ParentId + " - " + menu3.MenuId + "]; " + strSelectedMenu;
                            // }
                        }
                    }
                    else
                    {

                        foreach (var _dt in lstMenu)
                        {
                            //Papar
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_read ? "1" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Tambah
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_create ? "2" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Ubah
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_update ? "3" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Hapus
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_delete ? "4" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Cetak
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_print ? "5" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //upload
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_upload ? "6" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //download
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_download ? "7" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //import
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_import_data ? "8" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //export
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_export_data ? "9" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Pengesahan
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_authorize ? "10" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Luluskan Perubahan
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_approve_changes ? "11" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                            //Laksanakan
                            if ((_dt.menu_id.ToString() == menu2.ParentId) && (menu2.MenuId.ToString() == (_dt.bln_execute ? "12" : "0")))
                            {
                                strSelectedMenu = menu2.ParentId + "-" + menu2.MenuId + "; " + strSelectedMenu;
                            }

                        }

                        // if ((menu2.ParentId == "400") && (menu2.MenuId == "2"))
                        // {

                        //     //menu2.Selected = true;
                        //     strSelectedMenu = " - [" + menu2.ParentId + " - " + menu2.MenuId + "]; " + strSelectedMenu;
                        // }
                    }
                }
            }
        }

        // OnPopulateSelectedMenu();
    }

    void OnPopulateSelectedMenu()
    {
        if (!boolEditMode)
        {
            // Checked back all the item based on selected role
            if ((!boolMarkOnce) && (strSelectedMenu.Trim() != ""))
            {
                string[] arrMenuId = strSelectedMenu.Split(";");

                foreach (var item in arrMenuId)
                {
                    string[] _idMenu = item.Split("-");
                    MyTreeView.SetNodesChecked(n => (n.DataItem as FileMenuObject).ParentId == _idMenu[0].Trim() && (n.DataItem as FileMenuObject).MenuId == _idMenu[1].Trim(), true);
                }

                //MyTreeView.ExpandAll();
                // MyTreeView.SetNodesChecked(n => (n.DataItem as FileMenuObject).ParentId == "301" && (n.DataItem as FileMenuObject).MenuId == "2", true);
                // MyTreeView.SetNodesChecked(n => (n.DataItem as FileMenuObject).ParentId == "400" && (n.DataItem as FileMenuObject).MenuId == "2", true);

                // This is to marked that tree view is already populate
                boolMarkOnce = true;
                //Hide back the loading panel for tree view
                // PanelTree = false;

                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        checkedMenus = new List<ITreeViewNodeInfo>();

        //Create the menu
        IEnumerable<menu> result = await _MenuService.ListAll();
        parents = result.Where(x => x.parent_id == 0).ToList();

        List<menu> _dtChild;
        _dtMenu = new List<role_menu>();
        _dtContent = new List<FileMenuObject>();


        foreach (var item in parents)
        {
            //Check how many child under the node or just a single node
            _dtChild = result.Where(x => x.parent_id == item.menu_id).ToList();
            if (_dtChild.Count() == 0)
            {

                //Add the single node as a menu
                role_menu menu1 = new role_menu
                {
                    _id = item.menu_id,
                    role_id = 0,
                    role_name = "",
                    menu_id = item.menu_id,
                    menu_name = item.menu_name,
                    submenu_name = item.menu_name,
                    menu_path = item.menu_path,
                    header_id = 0,     //mark this is the menu with first child
                    parent_id = item.parent_id,
                    sort_order = item.menu_sequence,
                    icon_url = item.icon_path,
                    bln_create = false,
                    bln_update = false,
                    bln_delete = false,
                    bln_print = false,
                    bln_read = false,
                    bln_upload = false,
                    bln_download = false,
                    bln_import_data = false,
                    bln_export_data = false,
                    bln_authorize = false,
                    bln_approve_changes = false,
                    bln_execute = false,
                    created_date = item.created_at
                };

                _dtMenu.Add(menu1);

                //============ SET THE EDIT MENU ==============
                FileMenuObject objMenu = new FileMenuObject(item.menu_name, item.menu_id.ToString(), item.parent_id.ToString(), "./", true, item.menu_sequence, item.icon_path, "singleNodesClass", new List<FileMenuObject>() {
                    new FileMenuObject("Papar", "1", item.menu_id.ToString(), "", false, 1, "", ""),
                    new FileMenuObject("Tambah", "2", item.menu_id.ToString(), "", false, 2, "", ""),
                    new FileMenuObject("Ubah", "3", item.menu_id.ToString(), "", false, 3, "", ""),
                    new FileMenuObject("Hapus", "4", item.menu_id.ToString(), "", false, 4, "", ""),
                    new FileMenuObject("Cetak", "5", item.menu_id.ToString(), "", false, 5, "", ""),
                    new FileMenuObject("Muat Naik", "6", item.menu_id.ToString(), "", false, 6, "", ""),
                    new FileMenuObject("Muat Turun", "7", item.menu_id.ToString(), "", false, 7, "", ""),
                    new FileMenuObject("Import Data", "8", item.menu_id.ToString(), "", false, 8, "", ""),
                    new FileMenuObject("Eksport Data", "9", item.menu_id.ToString(), "", false, 9, "", ""),
                    new FileMenuObject("Pengesahan", "10", item.menu_id.ToString(), "", false, 10, "", ""),
                    new FileMenuObject("Lulus Perubahan", "11", item.menu_id.ToString(), "", false, 11, "", ""),
                    new FileMenuObject("Laksanakan", "12", item.menu_id.ToString(), "", false, 12, "", "")
                });

                _dtContent.Add(objMenu);
                //===============================================
            }
            else
            {

                //============ SET THE EDIT MENU ==============
                FileMenuObject rootMenu = new FileMenuObject(item.menu_name, item.menu_id.ToString(), item.parent_id.ToString(), "", true, item.menu_sequence, "", "root-item", new List<FileMenuObject>());

                //===============================================


                //Loop all the child as a menu
                foreach (var itemChild in _dtChild)
                {

                    //Add the node as menu
                    role_menu menu1 = new role_menu
                    {
                        _id = itemChild.menu_id,
                        role_id = 0,
                        role_name = "",
                        menu_id = itemChild.menu_id,
                        menu_name = item.menu_name,
                        submenu_name = itemChild.menu_name,
                        menu_path = itemChild.menu_path,
                        header_id = 1,     //mark this is the menu with first child
                        parent_id = item.menu_id,
                        sort_order = itemChild.menu_sequence,
                        icon_url =  itemChild.icon_path,
                        bln_create = false,
                        bln_update = false,
                        bln_delete = false,
                        bln_print = false,
                        bln_read = false,
                        bln_upload = false,
                        bln_download = false,
                        bln_import_data = false,
                        bln_export_data = false,
                        bln_authorize = false,
                        bln_approve_changes = false,
                        bln_execute = false,
                        created_date = itemChild.created_at
                    };

                    _dtMenu.Add(menu1);

                    //============ SET THE EDIT MENU ==============
                    FileMenuObject childMenu = new FileMenuObject(itemChild.menu_name, itemChild.menu_id.ToString(), itemChild.parent_id.ToString(), itemChild.menu_path, true, itemChild.menu_sequence, itemChild.icon_path, "", new List<FileMenuObject>()
                    {
                        new FileMenuObject("Papar", "1", itemChild.menu_id.ToString(), "", false, 1, "", ""),
                        new FileMenuObject("Tambah", "2", itemChild.menu_id.ToString(), "", false, 2, "", ""),
                        new FileMenuObject("Ubah", "3", itemChild.menu_id.ToString(), "", false, 3, "", ""),
                        new FileMenuObject("Hapus", "4", itemChild.menu_id.ToString(), "", false, 4, "", ""),
                        new FileMenuObject("Cetak", "5", itemChild.menu_id.ToString(), "", false, 5, "", ""),
                        new FileMenuObject("Muat Naik", "6", itemChild.menu_id.ToString(), "", false, 6, "", ""),
                        new FileMenuObject("Muat Turun", "7", itemChild.menu_id.ToString(), "", false, 7, "", ""),
                        new FileMenuObject("Import Data", "8", itemChild.menu_id.ToString(), "", false, 8, "", ""),
                        new FileMenuObject("Eksport Data", "9", itemChild.menu_id.ToString(), "", false, 9, "", ""),
                        new FileMenuObject("Pengesahan", "10", itemChild.menu_id.ToString(), "", false, 10, "", ""),
                        new FileMenuObject("Lulus Perubahan", "11", itemChild.menu_id.ToString(), "", false, 11, "", ""),
                        new FileMenuObject("Laksanakan", "12", itemChild.menu_id.ToString(), "", false, 12, "", "")
                    });

                    // Add the child menu to the root menu's sub-menu items
                    rootMenu.Content.Add(childMenu);
                    //===============================================
                }

                // Add the root menu to _dtContent
                _dtContent.Add(rootMenu);
            }
        }

        //Loop all the role with menu
        await PopulateMenuByRole();

        DataLoadedTcs.TrySetResult(true);
        PanelVisible = false;
    }

    //Assign all the role with menu
    async Task PopulateMenuByRole()
    {
        //Get all roles
        List<ApplicationRole> _dtRoles;
        _dtRoles = await _RoleService.ListAll();
        //Create the unique ID for the table
        int _intID = 0;

        var _tempDataSource = new List<role_menu>();
        //Get all the roles with assigned menu and their permission
        foreach (var role in _dtRoles)
        {
            var _dtTempRoleMenu = await _PermissionService.GetListByRole(role.Id);

            //Loop all the menu with role to the current menu
            foreach (var itemMenu in _dtTempRoleMenu)
            {
                if (itemMenu.can_view)
                {
                    List<role_menu> _dtTempMenu = _dtMenu.Where(x => x.menu_id == itemMenu.menu_id).ToList();
                    if (_dtTempMenu.Count() != 0)
                    {
                        _intID += 1;
                        var _data = _dtTempMenu.FirstOrDefault();
                        //Add the node as menu
                        role_menu menu1 = new role_menu
                            {
                                _id = _intID,  //_data.menu_id,
                                role_id = role.Id,
                                role_name = role.Name,
                                menu_id = _data.menu_id,
                                menu_name = _data.menu_name,
                                submenu_name = _data.submenu_name,
                                menu_path = _data.menu_path,
                                header_id = _data.header_id,     //mark this is the menu with first child
                                parent_id = _data.parent_id,
                                sort_order = _data.sort_order,
                                icon_url = _data.icon_url,
                                bln_create = itemMenu.can_add,
                                bln_update = itemMenu.can_edit,
                                bln_delete = itemMenu.can_delete,
                                bln_print = itemMenu.can_print,
                                bln_read = itemMenu.can_view,
                                bln_upload = itemMenu.can_upload,
                                bln_download = itemMenu.can_download,
                                bln_import_data = itemMenu.can_import_data,
                                bln_export_data = itemMenu.can_export_data,
                                bln_authorize = itemMenu.can_authorize,
                                bln_approve_changes = itemMenu.can_approve_changes,
                                bln_execute = itemMenu.can_execute,
                                created_date = _data.created_date
                            };

                        _tempDataSource.Add(menu1);
                    }
                }
            }
        }

        //Assinn to grid datasource
        dataSource = _tempDataSource.OrderBy(x => x.role_id).ThenBy(x => x.sort_order).ThenBy(x => x.parent_id).ThenBy(x => x.menu_id);
        dataRole = _dtRoles.OrderBy(x => x.Id);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync(); //.StartEditRowAsync(0);
        }
        // else
        // {
        //     if (!boolMarkOnce)
        //         OnPopulateSelectedMenu();
        // }

    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        //Get the selected Menu
        GetSelectedMenuRole();

        var _data = (role_menu)e.EditModel;
        if (strSelectedMenu.Trim() == "")
        {
            boolErrorMessage = false;
            e.AddError(nameof(_data.menu_name), "Medan Peranan perlu diisi.");
        }
        else
        {
            boolErrorMessage = true;
        }

    }

    void GetSelectedMenuRole()
    {
        // // string strParentId, strParentId2;
        // // string strMenuId, strMenuId2;
        strSelectedMenu = "";
        for (var i = 0; i < count; i++)
        {

            var item = (FileMenuObject)checkedMenus[i].DataItem;

            if ((item.ParentId != "0") && (int.Parse(item.MenuId) < 13))
            {
                //This is to get the sub menu id and it id access - remove the parent and submenu in the string
                bool blnExist = false;
                foreach (var x in _dtMenu)
                {
                    if ((x.parent_id.ToString() == item.ParentId.ToString()) && (x.menu_id.ToString() == item.MenuId.ToString()))
                    {
                        blnExist = true;
                        break;
                    }
                }

                if (!blnExist)
                    strSelectedMenu = item.MenuId + "-" + item.ParentId + ";" + strSelectedMenu;
            }
        }
    }

    string SortSelectedMenu()
    {
        //Clean the string
        strSelectedMenu = strSelectedMenu.Trim();
        // Check if the last character is ";" and remove it if necessary
        if (strSelectedMenu.EndsWith(";"))
        {
            strSelectedMenu = strSelectedMenu.Remove(strSelectedMenu.Length - 1);
        }

        // Step 1: Split the string into an array of substrings
        string[] arr = strSelectedMenu.Split(';', StringSplitOptions.RemoveEmptyEntries);

        // Step 2: Group the substrings by the `x` number (second part of the pair)
        var grouped = arr.Select(s => s.Split('-'))
                         .GroupBy(parts => int.Parse(parts[1]))
                         .Select(g => new
                         {
                             Key = g.Key,
                             Values = g.OrderBy(parts => int.Parse(parts[0])).Select(parts => string.Join("-", parts))
                         })
                         .OrderBy(g => g.Key);

        // Step 3: Join the sorted groups back into a single string
        List<string> resultList = new List<string>();
        foreach (var group in grouped)
        {
            resultList.AddRange(group.Values);

            // Remove the last `;` and add `#` instead
            resultList.Add($"#");
        }

        // Combine the result list into a single string with semicolons
        return string.Join(";", resultList);

    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {

        bool blnSuccess = false;
        List<permission> MenuAccess = new List<permission>();
        int _intID = 0;

        string strCurrentSortedMenu = SortSelectedMenu();
        string strParentId = "0";
        string[] arrMenu = strCurrentSortedMenu.Split("#");

        foreach (var item in arrMenu)
        {
            if (item.Trim() != "")
            {
                string[] arrChildMenu = item.Split(";");

                int intIndex = 0;
                if (arrChildMenu[0].Trim() == "")
                    intIndex = 1;

                //Need to find parent id for menu that has submenu
                foreach (var x in _dtMenu)
                {
                    if (x.menu_id == int.Parse(arrChildMenu[intIndex].Split('-')[intIndex]))
                    {
                        if (x.parent_id != 0)
                        {
                            //No duplicate parents id
                            if (!strParentId.Split(';').Any(y => y == x.parent_id.ToString()))
                            {
                                strParentId = strParentId + ";" + x.parent_id.ToString();

                                permission menuParent = new permission
                                {
                                    permission_id = 0, //_intID,
                                    role_id = intCurrentRoleId,
                                    menu_id = x.parent_id, // Set menu_id from x value of the first pair
                                    can_view = true,
                                    can_add = false,
                                    can_edit = false,
                                    can_delete = false,
                                    can_print = false,
                                    can_upload = false,
                                    can_download = false,
                                    can_import_data = false,
                                    can_export_data = false,
                                    can_authorize = false,
                                    can_approve_changes = false,
                                    can_execute = false,
                                    created_at = DateTime.Now
                                };

                                MenuAccess.Add(menuParent);

                                //Exit the loop
                                break;
                            }
                        }
                    }
                }

                // //Chekc if menu id is a parent id
                // if (!strParentId.Split(';').Any(y => y == int.Parse(arrChildMenu[intIndex].Split('-')[intIndex]).ToString()))
                // {
                    //_intID += 1;
                    // Create the permission object
                    permission menu1 = new permission
                    {
                        permission_id = 0, //_intID,
                        role_id = intCurrentRoleId,
                        menu_id = int.Parse(arrChildMenu[intIndex].Split('-')[intIndex]), // Set menu_id from x value of the first pair
                        can_view = arrChildMenu.Any(item => item.StartsWith("1-")),
                        can_add = arrChildMenu.Any(item => item.StartsWith("2-")),
                        can_edit = arrChildMenu.Any(item => item.StartsWith("3-")),
                        can_delete = arrChildMenu.Any(item => item.StartsWith("4-")),
                        can_print = arrChildMenu.Any(item => item.StartsWith("5-")),
                        can_upload = arrChildMenu.Any(item => item.StartsWith("6-")),
                        can_download = arrChildMenu.Any(item => item.StartsWith("7-")),
                        can_import_data = arrChildMenu.Any(item => item.StartsWith("8-")),
                        can_export_data = arrChildMenu.Any(item => item.StartsWith("9-")),
                        can_authorize = arrChildMenu.Any(item => item.StartsWith("10-")),
                        can_approve_changes = arrChildMenu.Any(item => item.StartsWith("11-")),
                        can_execute = arrChildMenu.Any(item => item.StartsWith("12-")),
                        created_at = DateTime.Now
                    };

                    MenuAccess.Add(menu1);
                // }
            }
        }

        //Save the permission
        ReturnViewModel response = new ReturnViewModel();
        response = await _PermissionService.BulkSaveByRole(MenuAccess);

        if (response.ReturnCode == 200)
        {
            await UpdateDataAsync();

            ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
                Title = "Proses kemaskini selesai."
            });
        }
        else
        {
            ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Danger,
                Title = "Ralat telah berlaku! Sila hubungi pentadbir sistem."
            });
        }
    }

    async Task UpdateDataAsync()
    {
        //Refresh back the data source
        await PopulateMenuByRole();
        intCurrentRoleId = 0;
        // boolMarkOnce = false;
        // boolPopulateOnce = false;
        // strSelectedMenu = "";
        // boolEditMode = false;
        // OnPopulateRoleMenu();
        // OnPopulateSelectedMenu();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(role_menu item)
    {
        strSelected = item.submenu_name;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        if (dtData != null)
        {
            //await _RoleMenuService.RemoveRoleAsync((system_role)dtData);
            //await UpdateDataAsync();
        }

        ConfirmationShown = false;
        ToastService.ShowToast(new ToastOptions()
        {
            ProviderName = "Overview",
            ThemeMode = ToastThemeMode.Saturated,
            RenderStyle = ToastRenderStyle.Success,
            Title = "Proses hapus selesai."
        });
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

}

