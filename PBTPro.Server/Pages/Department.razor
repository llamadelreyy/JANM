@page "/SenaraiJabatan"
@attribute [AllowAnonymous]

@inject Services.DepartmentService _department
@using DevExpress.Blazor
@implements IDisposable
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;

<h1>Senarai Jabatan</h1>
@if (_lstDepartment == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid @ref="Grid"
            Data="@_lstDepartment"
            PagerVisible="true"
            PagerPosition="GridPagerPosition.Bottom"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 5, 10, 15 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PageSize="2"
            ShowGroupPanel="true"
            CustomizeEditModel="OnCustomizeEditModel"
            EditModelSaving="OnEditModelSaving"
            DataItemDeleting="OnDataItemDeleting"
            CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
            SelectAllCheckboxMode="GridSelectAllCheckboxMode.AllPages"
            KeyFieldName="DepartId"
            VirtualScrollingEnabled=true
            ShowFilterRow="true"
            TextWrapEnabled="true"
            ShowSearchBox="true"
            AutoExpandAllGroupRows="false"
            SearchBoxNullText="Masukkan kata carian..."
            CssClass="mw-1000, grid-size">
        <Columns>
            <!--<DxGridSelectionColumn />-->
            <DxGridCommandColumn EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" Width="20%" />
            <DxGridDataColumn FieldName="@nameof(DepartmentInfo.DepartCode)" Caption="Kod Jabatan" Width="20%" SortOrder="GridColumnSortOrder.Ascending" SortIndex="1" />
            <DxGridDataColumn FieldName="@nameof(DepartmentInfo.DeptDepartName)" Caption="Nama Jabatan" Width="40%" SortOrder="GridColumnSortOrder.Ascending" SortIndex="1" />
            <DxGridDataColumn FieldName="@nameof(DepartmentInfo.DeptDescription)" Caption="Catatan" Width="40%" SortOrder="GridColumnSortOrder.Ascending" SortIndex="1" />
        </Columns>
        <EditFormTemplate Context="editFormContext">
            @{
                var jabatan = (DepartmentInfo)editFormContext.EditModel;
            }
            <DxFormLayout>
                <DxFormLayoutItem Caption="Kod Jabatan:">
                    @editFormContext.GetEditor("DepartCode")
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Nama Jabatan:">
                    @editFormContext.GetEditor("DeptDepartName")
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Catatan:">
                    @editFormContext.GetEditor("DeptDescription")
                </DxFormLayoutItem>
                @* <DxFormLayoutItem Caption="Status:">
                    @editFormContext.GetEditor("Rekstatus")
                </DxFormLayoutItem> *@
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
}
@code {

    private List<DepartmentInfo> _lstDepartment = new List<DepartmentInfo>();
    IGrid Grid { get; set; }
    GridGroupFooterDisplayMode CurrentDisplayMode { get; set; } = GridGroupFooterDisplayMode.Auto;
    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);
    [DefaultValue(GridSelectAllCheckboxMode.Page)]
    [Parameter]
    public GridSelectAllCheckboxMode SelectAllCheckboxMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }

    private async Task LoadList()
    {
        try
        {
            _lstDepartment = await _department.GetAllDepartment();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading actions: {ex.Message}");
        }
    }

    void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var editModel = (DepartmentInfo)e.EditModel;
            if (_lstDepartment.Any())
            {
                editModel.DepartId = _lstDepartment.Max(x => x.DepartId) + 1;
            }
            else
            {
                editModel.DepartId = 1;
            }
        }
    }
    async Task OnEditModelSaving(GridEditModelSavingEventArgs e)
    {
        try
        {
            // Cast EditModel directly to the jabatab model
            var editModel = e.EditModel as DepartmentInfo;

            // Check if editModel is null
            if (editModel == null)
            {
                Console.Error.WriteLine("Edit model is null.");
                return; // or throw an exception
            }

            var itmId = editModel.DepartId;
            editModel.DepartStatus = "A";
            editModel.CreatedDate = DateTime.Today;
            editModel.CreatedBy = 1;
            editModel.UpdatedDate = DateTime.Today;
            editModel.UpdatedBy = 1;

            // Determine if this is a new item or an update
            if (e.IsNew)
            {
                // Save new jabatan setting
                var jsonString = JsonConvert.SerializeObject(editModel);
                await _department.PostDepartment(jsonString);
            }
            else
            {
                var existingJabatan = await _department.GetIdDepartment(itmId);
                if (existingJabatan != null)
                {
                    existingJabatan.DepartCode = editModel.DepartCode;
                    existingJabatan.DeptDepartName = editModel.DeptDepartName;
                    existingJabatan.DeptDescription = editModel.DeptDescription;
                    //existingAction.Actionenabled = editModel.Actionenabled;
                    await _department.PutDepartment(itmId, existingJabatan);
                }
            }
            // Reload the entire Grid
            _lstDepartment = await _department.RefreshListDepartment();
        }
        catch (Exception ex)
        {
            // Handle exceptions and provide feedback
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }
    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        try
        {
            var t = e.DataItem as DepartmentInfo;
            var itmid = t.DepartId;
            // Remove the data item from the database.
            var deleteResult = await _department.DeleteDepartment(itmid);
            // Reload the entire Grid.
            _lstDepartment = await _department.RefreshListDepartment();
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.Error.WriteLine($"An error occurred while deleting the item : {ex.Message}");
        }
    }
    void Grid_CustomizeDataRowEditor(GridCustomizeDataRowEditorEventArgs e)
    {
        if (e.EditSettings is ITextEditSettings settings)
            settings.ShowValidationIcon = true;
    }
    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }
}
