@*
Project: PBT Pro
Description: Page of Borang Configuration
Author: Ismail
Date: November 2024
Version: 1.0

Additional Notes:
- setup field to be loaded to Mobile Apps Data Collection

Changes Logs:
11/11/2024 - initial create
31/12/2024 - adding permission control
*@
@page "/setup_borang"
@attribute [Authorize]
@using PBTPro.DAL.Services
@inject PBTAuthPermissionService PermissionService
@inject ConfigFormFieldService _ConfigFormField
@inject IToastNotificationService ToastService
@inject NavigationManager Navigation
@using Newtonsoft.Json
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices
@using PBTPro.DAL.Models.PayLoads
@using System.Text


@if (!PermissionService.HasPermission("View"))
{
    Navigation.NavigateTo("/no-permission");
}
else
{
    <div class="d-lg-flex border-bottom mb-2">
        <div class="col-md-12 py-1 dx-helptitle pageTitle">
            <img class="imgTitle" src="/images/icons/information.png" />
            <div class="textTitle">Setup Borang - Senarai Medan Borang</div>
        </div>
    </div>

    <div class="item-container-x">
        <DxTabs ActiveTabIndex="@ActiveTabIndex" ActiveTabIndexChanged=@OnActiveTabIndexChanged TabsPosition="TabsPosition.Top" RenderMode="TabsRenderMode.Default">
            <DxTab Text="Notis"></DxTab>
            <DxTab Text="Kompaun"></DxTab>
            <DxTab Text="Sitaan"></DxTab>
            <DxTab Text="Nota Pemeriksaan"></DxTab>
        </DxTabs>

        <DxGrid @ref="Grid" 
        Data="@Data"
        KeyFieldName="field_id"
        ShowGroupPanel="true"
        ShowFilterRow="false"
        TextWrapEnabled="true"
        CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
        EditorRenderMode="GridEditorRenderMode.Integrated"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        ShowSearchBox="true"
        AllowSelectRowByClick="true"
        @bind-SearchText="@GridSearchText"
        PageSize="25"
        @bind-PageIndex="@GridPageIndex"
        PagerPosition="GridPagerPosition.Bottom"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        EditModelSaving="Grid_EditModelSaving"
        EditFormButtonsVisible="true"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PagerAutoHideNavButtons="false"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
        HighlightRowOnHover="true"
        CssClass="mv-1000">
            <Columns>
                <DxGridCommandColumn Width="120px">
                    <HeaderTemplate>
                        @if (PermissionService.HasPermission("Add"))
                        {
                            <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                        }
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        @if (PermissionService.HasPermission("Edit"))
                        {
                            <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                        }
                    
                        @if (PermissionService.HasPermission("Delete"))
                        {
                            <a @onclick="@(() => Delete((config_form_field_view)context.DataItem))" style="text-decoration: none;padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                        }
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
                <DxGridDataColumn FieldName="field_name" Caption="Name" />
                <DxGridDataColumn FieldName="field_label" Caption="Label" />
                <DxGridDataColumn FieldName="field_type" Caption="Jenis" />
                <DxGridDataColumn FieldName="field_orders" Caption="Susunan" />
            </Columns>
            <EditFormTemplate Context="EditFormContext">
                @{
                    var field = (config_form_field_view)EditFormContext.EditModel;
                    var editContext = new EditContext(field);
                }
                <DxFormLayout EditContext="editContext" CssClass="w-100">
                    <DxFormLayoutItem Caption="field_id" ColSpanMd="6" Visible="false">
                        <DxTextBox @bind-Value="@field.field_id" ReadOnly="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Nama:" ColSpanMd="6">
                        <DxTextBox @bind-Text="@field.field_name" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Label:" ColSpanMd="6">
                        <DxTextBox @bind-Text="@field.field_label" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Jenis:" ColSpanMd="6">
                        <DxComboBox Data="@fieldType"
                                    NullText="Pilih Jenis Medan.."
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    @bind-Value="@field.field_type"
                                    TextFieldName="Text"
                                    ValueFieldName="Value"
                                    ShowValidationIcon="true"/>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Pilihan:" ColSpanMd="6">
                        <DxMemo @bind-Text="@field.field_option" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Diperlukan:" ColSpanMd="6">
                        <DxCheckBox @bind-Checked="@field.field_required" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Susunan:" ColSpanMd="6">
                        <DxSpinEdit @bind-Value="@field.field_orders" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Dari API:" ColSpanMd="6">
                        <DxCheckBox @bind-Checked="@field.field_api_seeded" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="URL Sumber:" ColSpanMd="6">
                        <DxTextBox @bind-Text="@field.field_source_url" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditFormTemplate>

            @*This is to count the summary*@
            <TotalSummary>
                <DxGridSummaryItem Name="Custom" SummaryType=GridSummaryItemType.Count />
            </TotalSummary>
        </DxGrid>
    </div>

    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>
}

@code {
    int ActiveTabIndex;
    bool ConfirmationShown { get; set; } = false;
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";
    IEnumerable<config_form_field_view> Data;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    private string formType = "Notis";
    private config_form_field_view itemToDelete;
    private List<dynamic> fieldType;
    
    protected override async Task OnInitializedAsync()
    {
        fieldType = _ConfigFormField.fieldType;
        Data = await GetListDataAsync(formType);
        DataLoadedTcs.TrySetResult(true);


        var fullUrl = Navigation.Uri;
        var uri = new Uri(fullUrl);
        var path = uri.AbsolutePath;
        path = path.TrimStart('/');

        var menu_path = path;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    private async Task OnActiveTabIndexChanged(int index)
    {
        ActiveTabIndex = index;

        switch (ActiveTabIndex)
        {
            case 0:
                formType = "Notice";
                break;
            case 1:
                formType = "Compound";
                break;
            case 2:
                formType = "Conficate";
                break;
            case 3:
                formType = "Note";
                break;
            default:
                formType = "Notice";
                break;
        }

        Data = await GetListDataAsync(formType);
        StateHasChanged();
    }

    private async Task<IEnumerable<config_form_field_view>> GetListDataAsync(string? formType = "Compound")
    {
        IEnumerable<config_form_field_view> result = await _ConfigFormField.ListByFormType(formType);
        return result;
    }

    #region Add/Edit
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        try
        {            
            ReturnViewModel response = new ReturnViewModel();
            var inputModel = e.EditModel as config_form_field_view;
            inputModel.field_form_type = formType;

            if (e.IsNew)
            {
                response = await _ConfigFormField.Add(inputModel);
            }
            else
            {
                response = await _ConfigFormField.Update(inputModel);
            }

            if (response.ReturnCode == 200)
            {
                Data = await GetListDataAsync(formType);
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                e.Cancel = true;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch(Exception ex)
        {

        }
    }
    #endregion

    #region Delete
    async Task Delete(config_form_field_view item)
    {
        itemToDelete = item;
        ConfirmationShown = true;
    }
    
    async void OnYesButtonClick()
    {
        try
        {            
            ReturnViewModel response = new ReturnViewModel();
            response = await _ConfigFormField.Delete(itemToDelete.field_id);

            if (response.ReturnCode == 200)
            {
                Data = await GetListDataAsync(formType);
                itemToDelete = null;
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch(Exception ex)
        {

        }
    }

    void OnNoButtonClick()
    {
        itemToDelete = null;
        ConfirmationShown = false;
    }
    #endregion

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if(status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if(status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }else if(status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
        {
            ProviderName = "Overview",
            ThemeMode = ToastThemeMode.Saturated,
            RenderStyle = RenderStyle,
            Title = message
        });
    }
}