@page "/setuprondaan"
@attribute [Authorize]

@implements IDisposable

@using PBTPro
@using PBTPro.Shared
@using PBTPro.Data
@using PBTPro.DAL
@using PBTPro.DAL.Models
@using PBTPro.DAL.Services
@using PBTPro.DAL.Models.CommonServices
@using PBTPro.DAL.Models.PayLoads


@inject UserProfileService _UserProfileService
@inject ScheduleService _ScheduleService
@inject UserService _UserService
@inject NavigationManager NavigationManager
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

<DxLoadingPanel @bind-Visible="PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Capaian Data...">

    <div class="d-lg-flex border-bottom">
        <div class="col-md-12 py-1 dx-helptitle pageTitle">
            <img class="imgTitle" src="\images\icons-small\hard-hat--plus.png" />
            <div class="textTitle">Setup Rondaan - Senarai Rondaan</div>
        </div>
    </div>

    <div class="item-container-x">
        <DxGrid @ref="Grid"
                Data="@dataSchedule"
                KeyFieldName="scheduleId"
                ShowGroupPanel="true"
                ShowFilterRow="false"
                TextWrapEnabled="true"
                CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
                EditorRenderMode="GridEditorRenderMode.Integrated"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ShowSearchBox="true"
                AllowSelectRowByClick="true"
                @bind-SearchText="@GridSearchText"
                PageSize="25"
                @bind-PageIndex="@GridPageIndex"
                PagerPosition="GridPagerPosition.Bottom"
                PagerNavigationMode="PagerNavigationMode.InputBox"
                EditModelSaving="Grid_EditModelSaving"
                EditFormButtonsVisible="false"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PagerAutoHideNavButtons="false"
                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
                HighlightRowOnHover="true"
                CssClass="mv-1000">

            <Columns>
                <DxGridCommandColumn Width="55px">
                    <HeaderTemplate>
                        <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                        <a @onclick="@(() => Delete((PatrolViewModel)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
                <DxGridDataColumn Caption="Nama Pegawai" MinWidth="120" Width="15%" FieldName="OfficerName" />
              @*   <DxGridDataColumn Caption="Lokasi Rondaan" MinWidth="100" Width="13%" FieldName="DistrictName" /> *@
                <DxGridDataColumn Caption="Tarikh & Masa Mula Rondaan" MinWidth="200" Width="30%" FieldName="StartTime" TextAlignment="GridTextAlignment.Left" AllowGroup="false">
                    <CellDisplayTemplate>
                        <div>
                            @CombineText(Convert.ToDateTime(((PatrolViewModel)context.DataItem).StartTime), Convert.ToDateTime(((PatrolViewModel)context.DataItem).EndTime), Convert.ToDateTime(((PatrolViewModel)context.DataItem).StartTime), Convert.ToDateTime(((PatrolViewModel)context.DataItem).EndTime))
                        </div>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Tarikh & Masa Tamat Rondaan" MinWidth="200" Width="30%" FieldName="EndTime" TextAlignment="GridTextAlignment.Left" AllowGroup="false">
                    <CellDisplayTemplate>
                        <div>
                            @CombineText(Convert.ToDateTime(((PatrolViewModel)context.DataItem).StartTime), Convert.ToDateTime(((PatrolViewModel)context.DataItem).EndTime), Convert.ToDateTime(((PatrolViewModel)context.DataItem).StartTime), Convert.ToDateTime(((PatrolViewModel)context.DataItem).EndTime))
                        </div>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
               @*  <DxGridDataColumn FieldName="PatrolStatus" Caption="Status" Width="12%" TextAlignment="GridTextAlignment.Center" AllowGroup="false">
                    <CellDisplayTemplate>
                        <div>@GetStatusRondaanIconHtml(((PatrolViewModel)context.DataItem).PatrolStatus)</div>
                    </CellDisplayTemplate>
                </DxGridDataColumn> *@
                <DxGridDataColumn FieldName="CreatedAt"
                                  DisplayFormat="dd/MM/yyyy"
                                  Caption="Tarikh Data"
                                  MinWidth="100"
                                  Width="12%"
                                  TextAlignment="GridTextAlignment.Center"
                                  SortOrder="GridColumnSortOrder.Ascending"
                                  SortIndex="0">
                    <FilterMenuTemplate>
                        <DateRange FilterContext="context" />
                    </FilterMenuTemplate>
                </DxGridDataColumn>
            </Columns>

            <EditFormTemplate Context="EditFormContext">
                @{
                    var dtEdit = (PatrolViewModel)EditFormContext.EditModel;
                    // This is to check whether in add new @ edit mode
                    boolLockDropDown = Grid.IsEditingNewRow();
                }
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem ColSpanMd="6" BeginRow="true">
                        <table class="layout_edit">
                            <tr>
                                <td nowrap>Nama Pegawai</td>
                                <td nowrap>&nbsp;&nbsp;</td>
                                <td width="50%">
                                    <DxComboBox Data="@dataUser"
                                                NullText="Pilih nama pegawai ..."
                                                ShowValidationIcon="true"
                                                SearchMode="ListSearchMode.AutoSearch"
                                                Enabled="@boolLockDropDown"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                TextFieldName="@nameof(ApplicationUser.TextName)"
                                                ValueFieldName="IdNo"
                                                CssClass="combo-width"
                                                SelectedItemChanged="@((ApplicationUser x) => SelectedItemChanged(x))"
                                                DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
                                                @bind-Value="@dtEdit.ICNo">
                                    </DxComboBox>

                                </td>
                                <td width="100px">&nbsp;</td>
                                <td nowrap></td>
                                <td>&nbsp;&nbsp;</td>
                                <td width="50%"></td>
                            </tr>
                            <tr>
                                <td nowrap>Jabatan</td>
                                <td nowrap>&nbsp;&nbsp;</td>
                                <td width="50%">
                                    <DxTextBox @bind-Text="@_itm.DeptName"
                                               @bind-Value="@dtEdit.DeptId"
                                               NullText="Jabatan pengguna ..."
                                               BindValueMode="BindValueMode.OnInput"
                                               Style="width: 320px;"
                                               Enabled="false" />
                                </td>                                
                            </tr>
                            <tr>
                                <td nowrap>Seksyen</td>
                                <td nowrap>&nbsp;&nbsp;</td>
                                <td width="50%">
                                    <DxTextBox @bind-Text="@_itm.UnitName"
                                               @bind-Value="@dtEdit.SectionId"
                                               NullText="Seksyen pengguna ..."
                                               BindValueMode="BindValueMode.OnInput"
                                               Style="width: 320px;"
                                               Enabled="false" />
                                </td>
                              
                            </tr>
                            <tr>
                                <td nowrap>Unit</td>
                                <td nowrap>&nbsp;&nbsp;</td>
                                <td width="50%">
                                    <DxTextBox @bind-Text="@_itm.UnitName"
                                               @bind-Value="@dtEdit.UnitId"
                                               NullText="Unit pengguna ..."
                                               BindValueMode="BindValueMode.OnInput"
                                               Style="width: 320px;"
                                               Enabled="false" />
                                </td>
                            </tr>                           
                            <tr>
                                <td nowrap>Masa Mula Rondaan</td>
                                <td>&nbsp;&nbsp;</td>
                                <td width="50%" colspan="6">
                                    <DxDateEdit @bind-Date="@dtEdit.StartTime"
                                                TimeSectionVisible="true"
                                                CssClass="cw-320"
                                                InputId="deStartTimeSection" />
                                </td>
                                <td width="100px">&nbsp;</td>
                                <td nowrap></td>
                                <td>&nbsp;&nbsp;</td>
                                <td width="50%"></td>
                            </tr>
                            <tr>
                                <td nowrap>Masa Tamat Rondaan</td>
                                <td>&nbsp;&nbsp;</td>
                                <td width="50%" colspan="6">
                                    <DxDateEdit @bind-Date="@dtEdit.EndTime"
                                                TimeSectionVisible="true"
                                                CssClass="cw-320"
                                                InputId="deEndTimeSection" />
                                </td>
                                <td width="100px">&nbsp;</td>
                                <td nowrap></td>
                                <td>&nbsp;&nbsp;</td>
                                <td width="50%"></td>
                            </tr>
                        </table>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12">
                        <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                        <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditFormTemplate>
            <CustomValidators>
                <MyCustomValidator DataItemValidating="ValidateGridData" />
            </CustomValidators>

            <TotalSummary>
                <DxGridSummaryItem FooterColumnName="ICNo"
                                   Name="Custom"
                                   SummaryType=GridSummaryItemType.Count />
            </TotalSummary>

        </DxGrid>

    </div>
</DxLoadingPanel>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>


@code {
    bool PanelVisible { get; set; }
    IEnumerable<ref_department> dtDepartment;
    IEnumerable<mst_patrol_schedule> dataSource;
    IEnumerable<ApplicationUser> dataUser;
    IEnumerable<ApplicationUser> valueUser;
    IEnumerable<PatrolViewModel> dataSchedule;
    PatrolViewModel dtData { get; set; }
    mst_patrol_schedule dtPatrolData { get; set; }
    user_profile_view userInfo = new user_profile_view();
    PatrolViewModel _itm = new PatrolViewModel();

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; } = "";

    bool boolLockDropDown { get; set; } = false;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        dataSource = await _ScheduleService.ListAll();
        dataUser = await _UserService.ListAll();
        dataSchedule = await _ScheduleService.ListsAll();
        DataLoadedTcs.TrySetResult(true);
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync();
        }
    }

    async void SelectedItemChanged(ApplicationUser x)
    {
        if (x != null)
        {
            userInfo = await _UserService.RetrievebyIc(x.IdNo);
            if (userInfo != null)
            {
                _itm.DeptName = userInfo.dept_name;
                _itm.SectionName = userInfo.div_name;
                _itm.UnitName = userInfo.unit_name;
                _itm.DeptId = (int)userInfo.dept_id;
                _itm.SectionId = (int)userInfo.div_id;
                _itm.UnitId = (int)userInfo.unit_id;

                StateHasChanged();
            }
        }
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (PatrolViewModel)e.EditModel;

        if (_data.OfficerName == null || _data.OfficerName.Trim() == "")
        {
            e.AddError(nameof(_data.OfficerName), "Medan jabatan perlu diisi.");
        }       
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        var editModel = e.EditModel as PatrolViewModel;

        try
        {
            if (e.IsNew)
                response = await _ScheduleService.Add(editModel);
            else
                response = await _ScheduleService.Update(editModel);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                HandleResponse("Proses kemaskini selesai.");
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task UpdateDataAsync()
    {
        dataSource = await _ScheduleService.Refresh();
    }

    async Task Delete(PatrolViewModel item)
    {
        strSelected = item.OfficerName;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _ScheduleService.Delete(dtData.scheduleId);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while delete the edit model: {ex.Message}");
        }
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    public MarkupString CombineText(DateTime startDtm, DateTime EndDtm, DateTime startTm, DateTime EndTm)
    {
        string html = string.Format("<b>TARIKH:</b> {0} - {1} <br/> <b>MASA:</b> {2} - {3} ", startDtm.ToString("dd/MM/yyyy"), EndDtm.ToString("dd/MM/yyyy"), startTm.ToString("HH:mm tt"), EndTm.ToString("HH:mm tt"));
        return new MarkupString(html);
    }

    public MarkupString GetStatusRondaanIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Selesai")
        {
            priorytyClass = "info";
            title = " SELESAI ";
        }
        else if (status == "Rondaan")
        {
            priorytyClass = "warning";
            title = " RONDAAN ";
        }
        else
        {
            priorytyClass = "danger";
            title = " BELUM MULA ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass, title);
        return new MarkupString(html);
    }

    #region response

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion

}