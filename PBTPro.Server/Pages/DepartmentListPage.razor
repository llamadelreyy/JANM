@page "/senarai_jabatan"
@attribute [Authorize]

@implements IDisposable

@using System.Globalization
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices
@using PBTPro.DAL.Services

@inject DepartmentService _department
@inject NavigationManager NavigationManager
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

<DxLoadingPanel @bind-Visible="PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Capaian Data...">

<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="\images\icons-small\hard-hat.png" />
        <div class="textTitle">Jabatan</div>
    </div>
</div>

<div class="item-container-x">

    <DxGrid @ref="Grid"
            Data="@_lstDepartment"
            KeyFieldName="dept_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>

            <DxGridCommandColumn Width="55px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((ref_department)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>

            <DxGridDataColumn FieldName="@nameof(ref_department.dept_code)" Caption="Kod Jabatan" Width="15%" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn FieldName="@nameof(ref_department.dept_name)" Caption="Nama Jabatan" Width="35%" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn FieldName="@nameof(ref_department.dept_desc)" Caption="Catatan" Width="38%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            @* <DxGridDataColumn FieldName="@nameof(ref_department.dept_status)" Caption="Status Aktif" Width="25%" TextAlignment="GridTextAlignment.Center" AllowGroup="false">
                <CellDisplayTemplate>
                    <div>@GetStatusDepartmentIconHtml(((ref_department)context.DataItem).dept_status)</div>
                </CellDisplayTemplate>
            </DxGridDataColumn> *@
            <DxGridDataColumn FieldName=@nameof(ref_department.created_at)
                              DisplayFormat="dd/MM/yyyy"
                              Caption="Tarikh Cipta"
                              MinWidth="120"
                              Width="12%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0" />
        </Columns>

        <EditFormTemplate Context="editFormContext">
            @{
                var dtData = (ref_department)editFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem ColSpanMd="4" BeginRow="true">
                    <table class="layout_edit">
                        <tr>
                            <td nowrap>Kod Jabatan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxTextBox @bind-Text="@dtData.dept_code"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Kod Jabatan..."
                                           Maxlength="120"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" style="width:120px;" />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Nama Jabatan</td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxTextBox @bind-Text="@dtData.dept_name"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Nama Jabatan..."
                                           Maxlength="120"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" style="width:350px;" />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap valign="top">Catatan</td>
                            <td valign="top">&nbsp;&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxMemo @bind-Text="@dtData.dept_desc"
                                        CssClass="cw-480"
                                        Rows="3" />
                            </td>
                        </tr>
                        @* <tr>
                            <td nowrap>Status Paparan</td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@DeptStatusOptions"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Status..."
                                            @bind-Value="@dtData.dept_status"
                                            @bind-Text="@dtData.dept_status">
                                </DxComboBox>
                            </td>
                        </tr> *@
                    </table>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>
    </DxGrid>
</div>
</DxLoadingPanel>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>

@code {
    bool PanelVisible { get; set; }

    private List<ref_department> _lstDepartment = new List<ref_department>();
    ref_department dtData { get; set; }
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    #region list
    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;

        _lstDepartment = await _department.GetDepartmentAsync();
        try
        {
            _lstDepartment = await _department.ListAll();
        }
        catch (Exception ex)
        {
        }
        DataLoadedTcs.TrySetResult(true);
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync();
        }
    }
    async Task UpdateDataAsync()
    {
        _lstDepartment = await _department.Refresh();
    }
    #endregion

    #region add/edit/delete
    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (ref_department)e.EditModel;

       

        if (_data.dept_code == null || _data.dept_code.Trim() == "")
        {
            e.AddError(nameof(_data.dept_code), "Kod Jabatan tidak sah. Medan perlu diisi.");
        }

        if (_data.dept_name == null || _data.dept_name == "")
        {
            e.AddError(nameof(_data.dept_name), "Nama Jabatan tidak sah. Medan perlu diisi.");
        }

        if (_data.dept_desc == null || _data.dept_desc == "")
        {
            e.AddError(nameof(_data.dept_desc), "Catatan Jabatan tidak sah. Medan perlu diisi.");
        }
    }


    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        bool blnSuccess = false;
        var editModel = e.EditModel as ref_department;
        try
        {
            if (e.IsNew)
            {
                response = await _department.Add(editModel);
                blnSuccess = true;
            }
            else
            {
                response = await _department.Update(editModel.dept_id, editModel);
                blnSuccess = true;
            }
            if (blnSuccess)
            {
                await UpdateDataAsync();
                //toastService.ShowInfo("Proses kemaskini selesai.");
            }
            else
            {
                //toastService.ShowError("Ralat telah berlaku! Sila hubungi pentadbir sistem.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task Delete(ref_department item)
    {
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _department.Delete(dtData.dept_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }
    #endregion

    #region lookup
    public MarkupString GetStatusDepartmentIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Aktif")
        {
            priorytyClass = "info";
            title = " AKTIF ";
        }
        else if (status == "Tidak Aktif")
        {
            priorytyClass = "danger";
            title = " TIDAK AKTIF ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass,
        title);
        return new MarkupString(html);
    }

    public MarkupString CombineText(string strStatus, string strNama)
    {
        string html = string.Format("{0} <br/> {1}", strStatus, strNama.ToUpper());
        return new MarkupString(html);
    }

    private List<string> DeptStatusOptions = new List<string>
    {
        "Aktif",
        "Tidak Aktif"
    };

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }
    #endregion

    #region response
    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion

}