@page "/soalan_lazim"
@attribute [AllowAnonymous]

@using System.Globalization
@implements IDisposable
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject NavigationManager NavigationManager
@inject FaqService _faq
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<!-- Bootstrap 5 CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Bootstrap 5 JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Soalan Lazim</div>
    </div>
</div>

<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="scrollable-accordion-container" style="max-height: 100%; overflow-y: auto;">
    <div class="accordion accordion-flush" id="accordionFlushExample">
        @{
            foreach (var category in _lstFaqs.Where(f => f.faq_status == "Aktif").GroupBy(f => f.faq_category))
            {
                var categoryId = category.FirstOrDefault()?.faq_id;
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button btn-primary collapsed" type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#flush-collapse-@categoryId"
                                aria-expanded="false"
                                aria-controls="flush-collapse-@categoryId">
                            @category.Key
                        </button>
                    </h2>
                    <div id="flush-collapse-@categoryId" class="accordion-collapse collapse" data-parent="#accordionFlushExample">
                        <div class="accordion-body" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var lstItm in category)
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button btn-danger collapsed" type="button"
                                                data-bs-toggle="collapse"
                                                data-bs-target="#flush-collapse-@lstItm.faq_id"
                                                aria-expanded="false"
                                                aria-controls="flush-collapse-@lstItm.faq_id">
                                            @lstItm.faq_question
                                        </button>
                                    </h2>
                                    <div id="flush-collapse-@lstItm.faq_id" class="accordion-collapse collapse" data-parent="#flush-collapse-@categoryId">
                                        <div class="accordion-body">
                                            @lstItm.faq_answer
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<faq_info> _lstFaqs = new List<faq_info>();

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    protected override async Task OnInitializedAsync()
    {
        //_lstFaqs = await _faq.GetFAQAsync();
        try
        {
            _lstFaqs = await _faq.ListAll();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading actions: {ex.Message}");
        }
        DataLoadedTcs.TrySetResult(true);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
        }
    }
}
