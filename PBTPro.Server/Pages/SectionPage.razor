@page "/section"
@attribute [AllowAnonymous]

@implements IDisposable

@using System.Globalization
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject DepartmentService _DepartmentService
@inject SectionService _SectionService
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="\images\icons-small\hard-hat--plus.png" />
        <div class="textTitle">Seksyen</div>
    </div>
</div>

<div class="item-container-x">
    @if (dataSource == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <DxGrid @ref="Grid"
        Data="dataSource"
        KeyFieldName="div_id"
        ShowGroupPanel="true"
        ShowFilterRow="false"
        TextWrapEnabled="true"
        CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
        EditorRenderMode="GridEditorRenderMode.Integrated"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        ShowSearchBox="true"
        AllowSelectRowByClick="true"
        @bind-SearchText="@GridSearchText"
        PageSize="25"
        @bind-PageIndex="@GridPageIndex"
        PagerPosition="GridPagerPosition.Bottom"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        EditModelSaving="Grid_EditModelSaving"
        EditFormButtonsVisible="false"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PagerAutoHideNavButtons="false"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
        HighlightRowOnHover="true"
        CssClass="mv-1000">

            <Columns>
                <DxGridCommandColumn Width="55px">
                    <HeaderTemplate>
                        <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                        <a @onclick="@(() => Delete((ref_division)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
                <DxGridDataColumn Caption="Jabatan" MinWidth="120" Width="15%" FieldName="dept_name" />
                <DxGridDataColumn Caption="Kod" MinWidth="100" Width="13%" FieldName="div_code" />
                <DxGridDataColumn Caption="Nama" MinWidth="250" Width="25%" FieldName="div_name" TextAlignment="GridTextAlignment.Left" />
                <DxGridDataColumn Caption="Keterangan" MinWidth="250" Width="35%" FieldName="div_desc" TextAlignment="GridTextAlignment.Left" />

                <DxGridDataColumn FieldName="created_at"
                DisplayFormat="dd/MM/yyyy"
                Caption="Tarikh Data"
                MinWidth="100"
                Width="12%"
                TextAlignment="GridTextAlignment.Center"
                SortOrder="GridColumnSortOrder.Ascending"
                SortIndex="0">
                    <FilterMenuTemplate>
                        <DateRange FilterContext="context" />
                    </FilterMenuTemplate>
                </DxGridDataColumn>
            </Columns>

            <EditFormTemplate Context="EditFormContext">
                @{
                    var dtEdit = (ref_division)EditFormContext.EditModel;
                }
                <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem ColSpanMd="6" BeginRow="true">
                    <table class="layout_edit">
                        <tr>
                            <td nowrap>Jabatan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                <DxComboBox Data="@dtDepartment"
                                            NullText="Pilih Jabatan ..."
                                            ShowValidationIcon="true"
                                            FilteringMode="DataGridFilteringMode.Contains"
                                            @bind-Value="@dtEdit.dept_id"
                                            @bind-Text ="@dtEdit.dept_name"
                                            TextFieldName="dept_name"
                                            ValueFieldName="dept_id">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Kod</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxTextBox @bind-Text="@dtEdit.div_code"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Masukkan kod seksyen ..."
                                           Maxlength="10"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" />
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Nama</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                <DxTextBox @bind-Text="@dtEdit.div_name"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Masukkan nama seksyen ..."
                                           Maxlength="60"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Keterangan</td>
                            <td nowrap>&nbsp;&nbsp;</td>
                            <td width="50%" colspan="6">
                                <DxTextBox @bind-Text="@dtEdit.div_desc"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Masukkan keterangan ..."
                                           Maxlength="120"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" />
                            </td>
                        </tr>
                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>


        <TotalSummary>
            <DxGridSummaryItem FooterColumnName="div_code"
                               Name="Custom"
                               SummaryType=GridSummaryItemType.Count />
        </TotalSummary>

    </DxGrid>
    }
</div>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
        <br />Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>


@code {
    IEnumerable<ref_department> dtDepartment;
    IEnumerable<ref_division> dataSource;

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }
    ref_division dtData { get; set; }

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        dataSource = await _SectionService.ListAll();
        dtDepartment = await _DepartmentService.ListAll();

        DataLoadedTcs.TrySetResult(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync(); //.StartEditRowAsync(0);
        }
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (ref_division)e.EditModel;

        if (_data.div_code == null || _data.div_code.Trim() == "")
        {
            e.AddError(nameof(_data.div_code), "Medan kod seksyen perlu diisi.");
        }

        if (_data.div_name == null || _data.div_name.Trim() == "")
        {
            e.AddError(nameof(_data.div_name), "Medan nama seksyen perlu diisi.");
        }

        if (_data.dept_id == 0 || _data.dept_id == null)
        {
            e.AddError(nameof(_data.dept_id), "Sila pilih Jabatan dari senarai.");
        }
    }

    async Task<bool> CheckDuplicateRecord(ref_division model, bool isNew)
    {

        if (isNew)
        {
            var _dtAdd = dataSource.Where(x => x.dept_id == model.dept_id && x.div_code == model.div_code).FirstOrDefault();

            if (_dtAdd != null)
                return false;
            else
                return true;
        }
        else
        {
            var _dtEdit = dataSource.Where(x => x.dept_id == model.dept_id && x.div_id != model.div_id && x.div_code == model.div_code).FirstOrDefault();

            if (_dtEdit != null)
                return false;
            else
                return true;
        }

    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        // bool blnSuccess = false;
        // string strMessage = "";
        // if (e.IsNew)
        // {
        //     var jsonString = JsonConvert.SerializeObject((section_info)e.EditModel);
        //     blnSuccess = await _SectionService.Add(jsonString) > 0 ? true : false;
        //     strMessage = "Proses tambah rekod selesai.";
        // }
        // else
        // {
        //     blnSuccess = await _SectionService.Update((section_info)e.EditModel) > 0 ? true : false;
        //     strMessage = "Proses kemaskini selesai.";
        // }

        // if (blnSuccess)
        //     await UpdateDataAsync();

        // ShowToast(blnSuccess, blnSuccess ? strMessage : "Ralat telah berlaku! Sila hubungi pentadbir sistem.");

        ReturnViewModel response = new ReturnViewModel();
        bool blnSuccess = false;
        var editModel = e.EditModel as ref_division;
        try
        {
            if (e.IsNew)
            {
                if (!await CheckDuplicateRecord(editModel, e.IsNew))
                {
                    response.ReturnCode = 500;
                    response.ReturnMessage = "Ralat! Rekod telah wujud.";
                }
                else
                    response = await _SectionService.Add(editModel);
            }
            else
            {
                if (!await CheckDuplicateRecord(editModel, e.IsNew))
                {
                    response.ReturnCode = 500;
                    response.ReturnMessage = "Ralat! Rekod telah wujud.";
                }
                else
                    response = await _SectionService.Update(editModel.div_id, editModel);

            }

            blnSuccess = response.ReturnCode == 200 ? true : false;

            if (blnSuccess)
            {
                await UpdateDataAsync();
                HandleResponse("Proses kemaskini selesai.");
            }
            else
            {
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task UpdateDataAsync()
    {
        //Refresh back the data source
        dataSource = await _SectionService.Refresh();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(ref_division item)
    {
        strSelected = item.div_name;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _SectionService.Delete(dtData.div_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
        // bool blnSuccess = false;
        // if (dtData != null)
        // {
        //     blnSuccess = await _SectionService.Delete(dtData.section_id);
        //     if (blnSuccess) await UpdateDataAsync();
        // }

        // ConfirmationShown = false;
        // ShowToast(blnSuccess, blnSuccess ? "Proses hapus selesai" : "Ralat telah berlaku! Sila hubungi pentadbir sistem.");
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }
    

    #region response
    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion

}