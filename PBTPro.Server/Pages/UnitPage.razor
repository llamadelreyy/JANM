@page "/unit"
@attribute [Authorize]

@implements IDisposable

@using PBTPro
@using PBTPro.Shared
@using PBTPro.Data
@using PBTPro.DAL
@using PBTPro.DAL.Models
@using PBTPro.DAL.Services
@using PBTPro.DAL.Models.CommonServices

@inject UnitService _UnitService
@inject DepartmentService _DepartmentService
@inject SectionService _SectionService
@inject NavigationManager NavigationManager
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService
@inject PBTAuthPermissionService PermissionService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>
@if (!PermissionService.HasPermission("View"))
{
    NavigationManager.NavigateTo("/no-permission");
}
else
{

    <DxLoadingPanel @bind-Visible="PanelVisible"
    IsContentBlocked="true"
    ApplyBackgroundShading="true"
    IndicatorAreaVisible="false"
    Text="Capaian Data...">

        <div class="d-lg-flex border-bottom">
            <div class="col-md-12 py-1 dx-helptitle pageTitle">
                <img class="imgTitle" src="\images\icons-small\hard-hat--arrow.png" />
                <div class="textTitle">Unit</div>
            </div>
        </div>

        <div class="item-container-x">

            <DxGrid @ref="Grid"
            Data="@dataSource"
            KeyFieldName="unit_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

                <Columns>
                    <DxGridCommandColumn Width="55px">
                        <HeaderTemplate>
                            @if (PermissionService.HasPermission("Add"))
                            {
                                <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                            }
                        </HeaderTemplate>
                        <CellDisplayTemplate>
                            @if (PermissionService.HasPermission("Edit"))
                            {
                                <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                            }
                            @if (PermissionService.HasPermission("Delete"))
                            {
                                <a @onclick="@(() => Delete((ref_unit)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                            }
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>
                    <DxGridDataColumn Caption="Jabatan" MinWidth="120" Width="17%" FieldName="dept_name" GroupIndex="0" />
                    <DxGridDataColumn Caption="Seksyen" MinWidth="120" Width="15%" FieldName="div_name" />
                    <DxGridDataColumn Caption="Kod" MinWidth="100" Width="8%" FieldName="unit_code" />
                    <DxGridDataColumn Caption="Nama" MinWidth="250" Width="23%" FieldName="unit_name" TextAlignment="GridTextAlignment.Left" />
                    <DxGridDataColumn Caption="Keterangan" MinWidth="250" Width="25%" FieldName="unit_desc" TextAlignment="GridTextAlignment.Left" />

                    <DxGridDataColumn FieldName="created_at"
                                      DisplayFormat="dd/MM/yyyy"
                                      Caption="Tarikh Data"
                                      MinWidth="100"
                                      Width="12%"
                                      TextAlignment="GridTextAlignment.Center"
                                      SortOrder="GridColumnSortOrder.Ascending"
                                      SortIndex="0">
                        <FilterMenuTemplate>
                            <DateRange FilterContext="context" />
                        </FilterMenuTemplate>
                    </DxGridDataColumn>
                </Columns>

                <EditFormTemplate Context="EditFormContext">
                    @{
                        var dtEdit = (ref_unit)EditFormContext.EditModel;
                    }
                    <DxFormLayout CssClass="w-100">
                        <DxFormLayoutItem ColSpanMd="6" BeginRow="true">
                            <table class="layout_edit">
                                <tr>
                                    <td nowrap>Jabatan</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="6">
                                        <DxComboBox Data="@dtDepartment"
                                                    NullText="Pilih Jabatan ..."
                                                    ShowValidationIcon="true"
                                                    FilteringMode="DataGridFilteringMode.Contains"
                                                    @bind-Value="@dtEdit.dept_id"
                                                    @bind-Text="@dtEdit.dept_name"
                                                    TextFieldName="dept_name"
                                                    ValueFieldName="dept_id">
                                        </DxComboBox>
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Seksyen</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="6">
                                        @{
                                            var intDepartmentID = dtDepartment.Where(c => c.dept_id == dtEdit.dept_id).FirstOrDefault()?.dept_id;
                                            var SectionData = dtSection.Where(x => x.dept_id == intDepartmentID);
                                        }
                                        <DxComboBox Data="@SectionData"
                                                    NullText="Pilih Seksyen ..."
                                                    ShowValidationIcon="true"
                                                    FilteringMode="DataGridFilteringMode.Contains"
                                                    @bind-Value="@dtEdit.div_id"
                                                    @bind-Text="@dtEdit.div_name"
                                                    TextFieldName="div_name"
                                                    ValueFieldName="div_id">
                                        </DxComboBox>
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Kod</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%">
                                        <DxTextBox @bind-Text="@dtEdit.unit_code"
                                                   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                   BindValueMode="BindValueMode.OnInput"
                                                   NullText="Masukkan kod unit ..."
                                                   Maxlength="10"
                                                   ShowValidationIcon="true"
                                                   CssClass="cw-320" />
                                    </td>
                                    <td width="100px">&nbsp;</td>
                                    <td nowrap></td>
                                    <td>&nbsp;&nbsp;</td>
                                    <td width="50%"></td>
                                </tr>
                                <tr>
                                    <td nowrap>Nama</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="6">
                                        <DxTextBox @bind-Text="@dtEdit.unit_name"
                                                   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                   BindValueMode="BindValueMode.OnInput"
                                                   NullText="Masukkan nama unit ..."
                                                   Maxlength="60"
                                                   ShowValidationIcon="true"
                                                   CssClass="cw-320" />
                                    </td>
                                </tr>
                                <tr>
                                    <td nowrap>Keterangan</td>
                                    <td nowrap>&nbsp;&nbsp;</td>
                                    <td width="50%" colspan="6">
                                        <DxTextBox @bind-Text="@dtEdit.unit_desc"
                                                   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                   BindValueMode="BindValueMode.OnInput"
                                                   NullText="Masukkan keterangan ..."
                                                   Maxlength="120"
                                                   ShowValidationIcon="true"
                                                   CssClass="cw-320" />
                                    </td>
                                </tr>
                            </table>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12">
                            <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                            <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditFormTemplate>
                <CustomValidators>
                    <MyCustomValidator DataItemValidating="ValidateGridData" />
                </CustomValidators>


                <TotalSummary>
                    <DxGridSummaryItem FooterColumnName="unit_code"
                                       Name="Custom"
                                       SummaryType=GridSummaryItemType.Count />
                </TotalSummary>

            </DxGrid>
        </div>
    </DxLoadingPanel>

    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" CssClass="confirmation-header" Width="auto" CloseOnOutsideClick="false">
        <BodyContentTemplate>
            <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
            <br />Anda pasti untuk menghapuskan rekod ini?
            <br /><br />
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" class="confirmation-btn" Click="@OnYesButtonClick" />
                <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" class="confirmation-btn" Click="@OnNoButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>
}

@code {
    bool PanelVisible { get; set; }

    IEnumerable<ref_department> dtDepartment;
    IEnumerable<ref_division> dtSection;
    IEnumerable<ref_unit> dataSource;

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }
    ref_unit dtData { get; set; }

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        dataSource = await _UnitService.ListAll();
        dtDepartment = await _DepartmentService.ListAll();
        dtSection = await _SectionService.ListAll();

        DataLoadedTcs.TrySetResult(true);
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync(); //.StartEditRowAsync(0);
        }
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (ref_unit)e.EditModel;

        if (_data.unit_code == null || _data.unit_code.Trim() == "")
        {
            e.AddError(nameof(_data.unit_code), "Medan kod unit perlu diisi.");
        }

        if (_data.unit_name == null || _data.unit_name.Trim() == "")
        {
            e.AddError(nameof(_data.unit_name), "Medan Nama Unit perlu diisi.");
        }

        if (_data.dept_id == 0 || _data.dept_id == null)
        {
            e.AddError(nameof(_data.dept_id), "Sila pilih Jabatan dari senarai.");
        }

        if (_data.div_id == 0 || _data.div_id == null)
        {
            e.AddError(nameof(_data.div_id), "Sila pilih Seksyen dari senarai.");
        }

        if (Grid.IsEditingNewRow())
        {
            var _dtAdd = dataSource.Where(x => x.dept_id == _data.dept_id && x.div_id == _data.div_id && x.unit_code == _data.unit_code).FirstOrDefault();

            if (_dtAdd != null)
                e.AddError(nameof(_data.unit_code), "Kod unit telah wujud.");
        }
        else
        {
            var _dtEdit = dataSource.Where(x => x.dept_id == _data.dept_id && x.div_id == _data.div_id && x.unit_code == _data.unit_code && x.unit_id != _data.unit_id).FirstOrDefault();

            if (_dtEdit != null)
                e.AddError(nameof(_data.unit_code), "Kod unit telah wujud.");
        }


    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {

        ReturnViewModel response = new ReturnViewModel();
        var editModel = e.EditModel as ref_unit;

        try
        {
            if (e.IsNew)
                response = await _UnitService.Add(editModel);
            else
                response = await _UnitService.Update(editModel.unit_id, editModel);


            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                HandleResponse("Proses kemaskini selesai.");
            }
            else
            {
                // HandleResponse("Ralat telah berlaku! Sila hubungi pentadbir sistem.");
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task UpdateDataAsync()
    {
        //Refresh back the data source
        dataSource = await _UnitService.Refresh();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(ref_unit item)
    {
        strSelected = item.unit_name;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _UnitService.Delete(dtData.unit_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }


    #region response
    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion
}