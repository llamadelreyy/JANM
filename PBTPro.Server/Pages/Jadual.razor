@page "/tetapan_jadual"
@* @attribute [Authorize(Roles = "Administrator")] *@
@attribute [AllowAnonymous]

@using System.Globalization
@implements IDisposable
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject NavigationManager NavigationManager
@inject PatrolSchedulerService _patrol_scheduleer
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Tetapan - Senarai Jadual</div>
    </div>
</div>

<style>
    .dxbl-grid {
        height: 79vh;
        max-height: 79vh;
    }
</style>

<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="item-container-x">
    <DxGrid @ref="Grid"
            Data="@_lstpatrolscheduler"
            KeyFieldName="scheduler_id"
            ShowGroupPanel="true"
            ShowFilterRow="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            PageSize="25"
            CustomizeEditModel="Grid_CustomizeEditModel"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="@ColumnResizeMode"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>

            <DxGridCommandColumn EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" Width="120px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((patrol_scheduler)context.DataItem))" style="text-decoration: none;padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>


            <DxGridDataColumn FieldName="@nameof(patrol_scheduler.scheduler_officer)" Caption="Nama Pegawai" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(patrol_scheduler.scheduler_location)" Caption="Lokasi Rondaan" Width="40%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(patrol_scheduler.scheduler_date)" Caption="Tarikh Rondaan" Width="40%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />                        
        </Columns>

        <EditFormTemplate Context="editFormContext">
            @{
                var dtData = (patrol_scheduler)editFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">



                <DxFormLayoutItem ColSpanMd="3" BeginRow="true">
                    <table>
                        
                        <tr>
                            <td nowrap>Nama Pegawai</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxTextBox @bind-Text="@dtData.scheduler_officer"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Nama Pegawai..."
                                           Maxlength="120"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" style="width:370px;" />
                            </td>
                        </tr>

                        <tr>
                            <td nowrap>Tempat Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxTextBox @bind-Text="@dtData.scheduler_location"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           BindValueMode="BindValueMode.OnInput"
                                           NullText="Tempat Rondaan..."
                                           Maxlength="120"
                                           ShowValidationIcon="true"
                                           CssClass="cw-320" style="width:370px;" />
                            </td>
                        </tr>


                        <tr>
                            <td nowrap>Tarikh Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%">
                                <DxDateEdit @bind-Date="@dtData.scheduler_date"
                                            TimeSectionVisible="true"
                                            CssClass="cw-320"
                                            InputId="dtmSection" />
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>

                        <tr style="height:10px;"><td colspan="7"></td></tr>
                        <tr style="height:1px;background-color:#ccc;"><td colspan="7"></td></tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>

                    </table>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>
    </DxGrid>


    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
        <BodyContentTemplate>
            <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
            <br />Anda pasti untuk menghapuskan rekod ini?
            <br /><br />
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
                <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>
</div>
@code {

    private List<patrol_scheduler> _lstpatrolscheduler = new List<patrol_scheduler>();

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }
    int intSelected { get; set; }
    patrol_scheduler dtData { get; set; }

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    private DateTime? patrolDtm = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        _lstpatrolscheduler = await _patrol_scheduleer.GetSchedulerAsync();
        DataLoadedTcs.TrySetResult(true);
        try
        {
            _lstpatrolscheduler = await _patrol_scheduleer.GetAllScheduler();
        }
        catch (JsonException jsonEx)
        {
            // Handle JSON parsing error
            var error = $"JSON Error: {jsonEx.Message}";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading actions: {ex.Message}");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync();
        }
    }
    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (patrol_scheduler)e.EditModel;
        
        if (_data.scheduler_officer == null || _data.scheduler_officer == "")
        {
            e.AddError(nameof(_data.scheduler_officer), "Soalan lazim tidak sah. Medan perlu diisi.");
        }

        if (_data.scheduler_location == null || _data.scheduler_location == "")
        {
            e.AddError(nameof(_data.scheduler_location), "Jawapan soalan lazim tidak sah. Medan perlu diisi.");
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        bool blnSuccess = false;
        var editModel = e.EditModel as patrol_scheduler;
        try
        {
            if (e.IsNew)
            {
                response = await _patrol_scheduleer.PostScheduler(editModel);
                blnSuccess = true;
            }
            else
            {
                response = await _patrol_scheduleer.PutScheduler(editModel.scheduler_id, editModel);
                blnSuccess = true;
            }

            if (blnSuccess)
            {
                await UpdateDataAsync();
                toastService.ShowInfo("Proses kemaskini selesai.");
            }
            else
            {
                toastService.ShowError("Ralat telah berlaku! Sila hubungi pentadbir sistem.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }
    async Task UpdateDataAsync()
    {
        _lstpatrolscheduler = await _patrol_scheduleer.RefreshListScheduler();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    async Task Delete(patrol_scheduler item)
    {        
        strSelected = item.scheduler_officer;
        intSelected = item.scheduler_id;
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {        
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _patrol_scheduleer.DeleteScheduler(dtData.scheduler_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
        dtData = null;
    }

    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }

    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (patrol_scheduler)e.DataItem;
        var editModel = e.EditModel as patrol_scheduler;

        if (dataItem == null)
            e.EditModel = new patrol_scheduler
                {
                    scheduler_date = DateTime.Now,
                };
        else
        {
            e.EditModel = new patrol_scheduler
                {
                    scheduler_id = dataItem.scheduler_id,
                    scheduler_officer = dataItem.scheduler_officer,
                    scheduler_location = dataItem.scheduler_location,
                    scheduler_date = dataItem.scheduler_date,
                };
        }
    }
    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
}
