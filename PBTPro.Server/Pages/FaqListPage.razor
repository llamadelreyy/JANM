@*
Project: PBT Pro
Description: Page of Soalan Lazim
Author: Farhana
Date: November 2024
Version: 1.0

Changes Logs:
14/11/2024 - initial create
10/01/2025 - fix ui based on standard and allow anonymous
*@

@page "/senarai_faq"
@attribute [Authorize]

@implements IDisposable

@using System.Globalization
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject FaqService _faq
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<style>
    .dxbl-grid {
        height: 98.5%;
        max-height: 98.5%;
    }
</style>

<DxLoadingPanel @bind-Visible="PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Capaian Data...">

<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
            <img class="imgTitle" src="\images\icons-small\documents-stack.png" />
        <div class="textTitle">Soalan Lazim</div>
    </div>
</div>

<div class="item-container-x">

    <DxGrid @ref="Grid"
            Data="@_lstFaqs"
            KeyFieldName="faq_id"
            ShowGroupPanel="true"
            ShowFilterRow="false"
            TextWrapEnabled="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ShowSearchBox="true"
            AllowSelectRowByClick="true"
            @bind-SearchText="@GridSearchText"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            GroupFooterDisplayMode="GridGroupFooterDisplayMode.Auto"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>

            <DxGridCommandColumn Width="55px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding:0px 2px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                        <a @onclick="@(() => Delete((ref_faq)context.DataItem))" style="text-decoration: none;padding:0px 0px 0px 2px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
                <DxGridDataColumn FieldName="@nameof(ref_faq.faq_category)" Caption="Kategori" Width="15%" TextAlignment="GridTextAlignment.Left" />
                <DxGridDataColumn FieldName="@nameof(ref_faq.faq_question)" Caption="Soalan" Width="25%" TextAlignment="GridTextAlignment.Left" />
                <DxGridDataColumn FieldName="@nameof(ref_faq.faq_answer)" Caption="Jawapan" Width="36%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
                <DxGridDataColumn FieldName="@nameof(ref_faq.faq_status)" Caption="Status" Width="12%" TextAlignment="GridTextAlignment.Center">
                <CellDisplayTemplate>
                        <div>@GetStatusFAQIconHtml(((ref_faq)context.DataItem).faq_status)</div>
                </CellDisplayTemplate>
            </DxGridDataColumn>
                <DxGridDataColumn FieldName=@nameof(ref_faq.created_at)
                              DisplayFormat="dd/MM/yyyy"
                              Caption="Tarikh Data"
                              MinWidth="120"
                              Width="12%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0" />
        </Columns>

        <EditFormTemplate Context="editFormContext">
            @{
                    var dtData = (ref_faq)editFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem ColSpanMd="6" ColSpanLg="8" BeginRow="true">
                    <table class="layout_edit">
                        <tr>
                            <td nowrap>Status</td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxComboBox Data="@faqStatusOptions"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Status..."
                                            @bind-Value="@dtData.faq_status"
                                            @bind-Text="@dtData.faq_status"
                                            CssClass="cw-320" style="width:200px;">
                                </DxComboBox>
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Kategori</td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%">
                                <DxComboBox Data="@faqCategory"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Kategori..."
                                            @bind-Value="@dtData.faq_category"
                                            @bind-Text="@dtData.faq_category"
                                            CssClass="cw-320" style="width:200px;">
                                </DxComboBox>
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap valign="top">Soalan</td>
                            <td valign="top">&nbsp;&nbsp;</td>
                            <td width="50%" colspan="5">
                                <DxMemo @bind-Text="@dtData.faq_question"
                                        CssClass="cw-480"
                                        Rows="3" />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap valign="top">Jawapan</td>
                            <td valign="top">&nbsp;&nbsp;</td>
                            <td width="50%" colspan="5">
                                <DxMemo @bind-Text="@dtData.faq_answer"
                                        CssClass="cw-480"
                                        Rows="3" />
                            </td>
                        </tr>                       
                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" class="btn-edit-grid" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" class="btn-edit-grid" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>
    </DxGrid>
</div>
</DxLoadingPanel>

<DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate>
        Anda pasti untuk menghapuskan rekod ini?
        <br /><br />
        <div class="confirm-dialog-buttons">
            <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
            <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
        </div>
    </BodyContentTemplate>
</DxPopup>

@code {
    bool PanelVisible { get; set; }

    private List<ref_faq> _lstFaqs = new List<ref_faq>();
    ref_faq dtData { get; set; }
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";
    bool ConfirmationShown { get; set; } = false;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    #region list
    protected override async Task OnInitializedAsync()
    {   
        PanelVisible = true;
        _lstFaqs = await _faq.GetFAQAsync();
        try
        { 
            _lstFaqs = await _faq.ListAll(); 
            DataLoadedTcs.TrySetResult(true);
        }
        catch (Exception ex)
        { 
            Console.Error.WriteLine($"Error loading actions: {ex.Message}"); 
        }
        PanelVisible = false;
    }

    async Task UpdateDataAsync()
    {
        _lstFaqs = await _faq.Refresh();
    }
    #endregion

    #region add/edit/delete
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        bool blnSuccess = false;
        var editModel = e.EditModel as ref_faq;
        try
        {
            if (e.IsNew)
            {
                response = await _faq.Add(editModel);
                blnSuccess = true;
            }
            else
            {
                response = await _faq.Update(editModel.faq_id, editModel);
                blnSuccess = true;
            }
            if (blnSuccess)
            {
                await UpdateDataAsync();
                toastService.ShowInfo("Proses kemaskini selesai.");
            }
            else
            {
                toastService.ShowError("Ralat telah berlaku! Sila hubungi pentadbir sistem.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task Delete(ref_faq item)
    {
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _faq.Delete(dtData.faq_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
    }

    void OnNoButtonClick()
    {
        dtData = null;
        ConfirmationShown = false;
    }

    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (ref_faq)e.EditModel;
        if (_data.faq_status == null || _data.faq_status.Trim() == "")
        {
            e.AddError(nameof(_data.faq_status), "Status tidak sah. Medan perlu diisi.");
        }

        if (_data.faq_category == null || _data.faq_category == "")
        {
            e.AddError(nameof(_data.faq_category), "Kategori tidak sah. Medan perlu diisi.");
        }

        if (_data.faq_question == null || _data.faq_question == "")
        {
            e.AddError(nameof(_data.faq_question), "Pertanyaana soalan lazim tidak sah. Medan perlu diisi.");
        }

        if (_data.faq_answer == null || _data.faq_answer == "")
        {
            e.AddError(nameof(_data.faq_answer), "Catatan soalan lazim tidak sah. Medan perlu diisi.");
        }
    }
    #endregion

    #region lookup
    public MarkupString GetStatusFAQIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Aktif")
        {
            priorytyClass = "info";
            title = " AKTIF ";
        }
        else if (status == "Tidak Aktif")
        {
            priorytyClass = "danger";
            title = " TIDAK AKTIF ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass,
        title);
        return new MarkupString(html);
    }
    public MarkupString CombineText(string strStatus, string strNama)
    {
        string html = string.Format("{0} <br/> {1}", strStatus, strNama.ToUpper());
        return new MarkupString(html);
    }
    private List<string> faqStatusOptions = new List<string>
    {
        "Aktif",
        "Tidak Aktif"
    };

    private List<string> faqCategory = new List<string>
    {
        "Umum",
        "PBT Mobile",
        "PBT Web"
    };
    #endregion

    #region response
    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion
}
