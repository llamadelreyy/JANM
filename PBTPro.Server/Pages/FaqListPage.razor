@page "/senarai_faq"
@attribute [Authorize(Roles = "Administrator")]

@implements IDisposable

@using System.Globalization
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject FaqService _faq
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Soalan Lazim - Senarai Soalan Lazim</div>
    </div>
</div>

<style>
    .dxbl-grid {
        height: 79vh;
        max-height: 79vh;
    }
</style>

<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="item-container-x">
    <DxGrid @ref="Grid"
            Data="@_lstFaqs"
            KeyFieldName="faq_id"
            ShowGroupPanel="true"
            ShowFilterRow="true"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            PageSize="25"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="@ColumnResizeMode"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>
            <DxGridCommandColumn EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" Width="120px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                    <a @onclick="@(() => Delete((faq_info)context.DataItem))" style="text-decoration: none;padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn FieldName="@nameof(faq_info.faq_category)" Caption="Kategori" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(faq_info.faq_question)" Caption="Soalan" Width="40%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(faq_info.faq_answer)" Caption="Jawapan" Width="40%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(faq_info.faq_status)" Caption="Status Aktif" Width="40%" TextAlignment="GridTextAlignment.Center" AllowGroup="false">
                <CellDisplayTemplate>
                    <div>@GetStatusFAQIconHtml(((faq_info)context.DataItem).faq_status)</div>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName=@nameof(faq_info.created_date)
                              DisplayFormat="dd/MM/yyyy"
                              Caption="Tarikh Cipta"
                              MinWidth="120"
                              Width="12%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0" />
        </Columns>

        <EditFormTemplate Context="editFormContext">
            @{
                var dtData = (faq_info)editFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem ColSpanMd="3" BeginRow="true">
                    <table>

                        <tr>
                            <td nowrap>Status Paparan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@faqStatusOptions"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Status..."
                                            @bind-Value="@dtData.faq_status"
                                            @bind-Text="@dtData.faq_status">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Kategori Soalan Lazim</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@faqCategory"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Kategori..."
                                            @bind-Value="@dtData.faq_category"
                                            @bind-Text="@dtData.faq_category">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr>
                            <td nowrap valign="top">Soalan</td>
                            <td valign="top">&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxMemo @bind-Text="@dtData.faq_question"
                                        CssClass="cw-480"
                                        Rows="3" />
                            </td>
                        </tr>
                        <tr>
                            <td nowrap valign="top">Jawapan</td>
                            <td valign="top">&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxMemo @bind-Text="@dtData.faq_answer"
                                        CssClass="cw-480"
                                        Rows="3" />
                            </td>
                        </tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>
                        <tr style="height:1px;background-color:#ccc;"><td colspan="7"></td></tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>

                    </table>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
        <BodyContentTemplate>
            Anda pasti untuk menghapuskan rekod ini?
            <br /><br />
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
                <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>
</div>

@code {
    private List<faq_info> _lstFaqs = new List<faq_info>();
    faq_info dtData { get; set; }
    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";
    bool ConfirmationShown { get; set; } = false;

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    #region list
    protected override async Task OnInitializedAsync()
    {
        _lstFaqs = await _faq.GetFAQAsync();
        try
        { _lstFaqs = await _faq.ListAll(); }
        catch (Exception ex)
        { Console.Error.WriteLine($"Error loading actions: {ex.Message}"); }
        DataLoadedTcs.TrySetResult(true);
    }

    async Task UpdateDataAsync()
    {
        _lstFaqs = await _faq.Refresh();
    }
    #endregion

    #region add/edit/delete
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        bool blnSuccess = false;
        var editModel = e.EditModel as faq_info;
        try
        {
            if (e.IsNew)
            {
                response = await _faq.Add(editModel);
                blnSuccess = true;
            }
            else
            {
                response = await _faq.Update(editModel.faq_id, editModel);
                blnSuccess = true;
            }
            if (blnSuccess)
            {
                await UpdateDataAsync();
                toastService.ShowInfo("Proses kemaskini selesai.");
            }
            else
            {
                toastService.ShowError("Ralat telah berlaku! Sila hubungi pentadbir sistem.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }

    async Task Delete(faq_info item)
    {
        dtData = item;
        ConfirmationShown = true;
    }

    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _faq.Delete(dtData.faq_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
    }

    void OnNoButtonClick()
    {
        dtData = null;
        ConfirmationShown = false;
    }

    #endregion

    #region lookup
    public MarkupString GetStatusFAQIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Aktif")
        {
            priorytyClass = "info";
            title = " AKTIF ";
        }
        else if (status == "Tidak Aktif")
        {
            priorytyClass = "danger";
            title = " TIDAK AKTIF ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass,
        title);
        return new MarkupString(html);
    }
    public MarkupString CombineText(string strStatus, string strNama)
    {
        string html = string.Format("{0} <br/> {1}", strStatus, strNama.ToUpper());
        return new MarkupString(html);
    }
    private List<string> faqStatusOptions = new List<string>
    {
        "Aktif",
        "Tidak Aktif"
    };

    private List<string> faqCategory = new List<string>
    {
        "Umum",
        "PBT Mobile",
        "PBT Web"
    };
    #endregion

    #region response
    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    #endregion
}
