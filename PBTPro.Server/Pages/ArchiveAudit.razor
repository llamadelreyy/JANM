@page "/SenaraiArkibAudit"
@attribute [AllowAnonymous]


 @using System.Globalization
@implements IDisposable
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models;
@using PBT.Data
@inject NavigationManager NavigationManager
@inject ArchiveAuditService _audit
@inject IToastService toastService


<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Log Audit - Senarai Arkib Log Audit</div>
    </div>
</div>

<style>
    .dxbl-grid {
        height: 79vh;
        max-height: 79vh;
    }
</style>


<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="item-container-x">
    <DxGrid @ref="Grid"
        Data="@_lstAudits" 
        KeyFieldName="ArchiveId"
        ShowGroupPanel="true"
        ShowFilterRow="true"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        PageSize="25"
        @bind-PageIndex="@GridPageIndex"
        PagerPosition="GridPagerPosition.Bottom"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PagerAutoHideNavButtons="false"
        ColumnResizeMode="@ColumnResizeMode"
        HighlightRowOnHover="true"
        CssClass="mv-1000">

        <Columns>
            <DxGridDataColumn FieldName="@nameof(auditlog_archive_info.created_date)" Caption="Tarikh Dicipta" TextAlignment="GridTextAlignment.Center" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(auditlog_archive_info.archive_username)" Caption="Nama Pengguna" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(auditlog_archive_info.archive_type)" Caption="Jenis Maklumat" TextAlignment="GridTextAlignment.Center" AllowGroup="false">
            <CellDisplayTemplate>
                    <div>@GetStatusAuditIconHtml(((auditlog_archive_info)context.DataItem).archive_type)</div>
            </CellDisplayTemplate>
        </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(auditlog_archive_info.archive_module_name)" Caption="Nama Modul" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(auditlog_archive_info.archive_method)" Caption="Method" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(auditlog_archive_info.archive_description)" Caption="Penerangan" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
        </Columns>      
    </DxGrid>
    <hr style="background-color:transparent; border: 2px solid #FFF;padding:0;margin:auto;" />
@*     <DxButton Text="Export XLSX" Click="ExportXlsx_Click" />
    <DxButton Text="Export XLS" Click="ExportXls_Click" />
    <DxButton Text="Export CSV" Click="ExportCsv_Click" />
 *@    <hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
</div>
@code {

    private List<auditlog_archive_info> _lstAudits = new List<auditlog_archive_info>();

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }
    int intSelected { get; set; }
    auditlog_archive_info dtData { get; set; }

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);


    protected override async Task OnInitializedAsync()
    {
        _lstAudits = await _audit.GetAuditAsync();
        DataLoadedTcs.TrySetResult(true);

        try
        {
            _lstAudits = await _audit.GetAllAudit();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading actions: {ex.Message}");
        }
    }  
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync();
        }
    }

    void Grid_CustomizeDataRowEditor(GridCustomizeDataRowEditorEventArgs e)
    {
        if (e.EditSettings is ITextEditSettings settings)
            settings.ShowValidationIcon = true;
    }
    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }
    public MarkupString GetStatusAuditIconHtml(int? status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == 2)
        {
            priorytyClass = "info";
            title = " Informasi ";
        }
        else if (status == 1)
        {
            priorytyClass = "danger";
            title = " Ralat ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass,
        title);
        return new MarkupString(html);
    }
}
