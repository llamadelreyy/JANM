@page "/senarai_rondaan"
@attribute [AllowAnonymous]



@using System.Globalization
@implements IDisposable
@using Blazored.Toast.Services
@using Newtonsoft.Json
@using System.ComponentModel
@using PBTPro.DAL.Models
@using PBTPro.Data
@using PBTPro.DAL.Models.CommonServices

@inject PatrolService _patrolling
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject IToastNotificationService ToastService

<div class="d-lg-flex border-bottom mb-2">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons/information.png" />
        <div class="textTitle">Rondaan - Senarai Jadual Rondaan</div>
    </div>
</div>

<style>
    .dxbl-grid {
        height: 79vh;
        max-height: 79vh;
    }
</style>

<hr style="background-color:transparent; padding:0.5em 0;margin:auto;" />
<div class="item-container-x">
    <DxTabs ActiveTabIndex="@ActiveTabIndex" ActiveTabIndexChanged=@OnActiveTabIndexChanged TabsPosition="TabsPosition.Top" RenderMode="TabsRenderMode.Default">
        <DxTab Text="Belum Mula (8)"></DxTab>
        <DxTab Text="Dalam Rondaan (5)"></DxTab>
        <DxTab Text="Selesai (1)"></DxTab>
    </DxTabs>

    <a href="tetapan_jadual" type="button" class="btn btn-primary text-right">Cipta Jadual</a>

    <DxGrid @ref="Grid"
            Data="@_lstPatrollings"
            KeyFieldName="patrol_id"
            ShowGroupPanel="true"
            ShowFilterRow="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            PageSize="25"
            CustomizeEditModel="Grid_CustomizeEditModel"
            @bind-PageIndex="@GridPageIndex"
            PagerPosition="GridPagerPosition.Bottom"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            EditModelSaving="Grid_EditModelSaving"
            EditFormButtonsVisible="false"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 25, 50, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerAutoHideNavButtons="false"
            ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
            HighlightRowOnHover="true"
            CssClass="mv-1000">

        <Columns>

            <DxGridCommandColumn EditButtonVisible="true" DeleteButtonVisible="true" NewButtonVisible="true" Width="120px">
                <HeaderTemplate>
                    <a @onclick="@(() => Grid.StartEditNewRowAsync())" style="text-decoration: none;" href="javascript:void(0);"><img src="images/icons/plus-circle.png" /></a>
                </HeaderTemplate>
                <CellDisplayTemplate>
                    @if (dtData.patrol_status == "Baru")
                    {
                        <a @onclick="@(() => Grid.StartEditRowAsync(context.VisibleIndex))" style="text-decoration: none; padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/table--pencil.png" /></a>
                        <a @onclick="@(() => Delete((patrol_info)context.DataItem))" style="text-decoration: none;padding-right:5px;" href="javascript:void(0);"><img src="images/icons-small/cross-circle-frame.png" /></a>
                    }
                </CellDisplayTemplate>
            </DxGridCommandColumn>

            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_officer_name)" Caption="Nama Pegawai" Width="40%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_start_location)" Caption="Lokasi Rondaan" Width="40%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_start_dtm)" Caption="Masa Mula Rondaan" DisplayFormat="dd/MM/yyyy"
                              MinWidth="120"
                              Width="20%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0" />
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_end_dtm)" Caption="Masa Tamat Rondaan" DisplayFormat="dd/MM/yyyy"
                              MinWidth="120"
                              Width="20%"
                              TextAlignment="GridTextAlignment.Center"
                              SortOrder="GridColumnSortOrder.Ascending"
                              SortIndex="0" />
            <DxGridDataColumn FieldName="@nameof(patrol_info.patrol_status)" Caption="Status Rondaan" Width="20%" TextAlignment="GridTextAlignment.Left" AllowGroup="false" />

        </Columns>

        <EditFormTemplate Context="editFormContext">
            @{
                var dtData = (patrol_info)editFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">

                <DxFormLayoutItem ColSpanMd="3" BeginRow="true">
                    <table class="">
                        <tr>
                            <td nowrap>Nama Pegawai</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">                                 
                               <DxComboBox Data="@dtOfficerName" 
                                    @bind-Value="@ValueOfficerName" 
                                    NullText="Pilih Nama Pegawai..."
                                    TextFieldName="@nameof(patrol_scheduler.scheduler_officer)"                                   
                                    ShowValidationIcon="true"
                                    onchange="OnOfficerNameChanged">
                                </DxComboBox> 
                               
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Lokasi Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@dtLocation"
                                            @bind-Value="@ValueLocation"
                                            NullText="Pilih Lokasi Rondaan..."
                                            TextFieldName="@nameof(patrol_scheduler.scheduler_location)"
                                            ShowValidationIcon="true">
                                </DxComboBox>                                
                            </td>
                        </tr>
                        <tr>
                            <td nowrap>Masa Mula Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%">
                                <DxDateEdit @bind-Date="@patrolStartDtm"
                                            TimeSectionVisible="true"
                                            CssClass="cw-320"
                                            InputId="deStartTimeSection" />
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Masa Tamat Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%">
                                <DxDateEdit @bind-Date="@patrolEndDtm"
                                            TimeSectionVisible="true"
                                            CssClass="cw-320"
                                            InputId="deEndTimeSection" />
                            </td>
                            <td width="100px">&nbsp;</td>
                            <td nowrap></td>
                            <td>&nbsp;&nbsp;</td>
                            <td width="50%"></td>
                        </tr>
                        <tr>
                            <td nowrap>Status Rondaan</td>
                            <td>&nbsp;:&nbsp;</td>
                            <td width="50%" colspan="7">
                                <DxComboBox Data="@patrollingStatusOptions"
                                            ShowValidationIcon="true"
                                            NullText="Pilih Status..."
                                            @bind-Value="@dtData.patrol_status"
                                            @bind-Text="@dtData.patrol_status">
                                </DxComboBox>
                            </td>
                        </tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>
                        <tr style="height:1px;background-color:#ccc;"><td colspan="7"></td></tr>
                        <tr style="height:10px;"><td colspan="7"></td></tr>

                    </table>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12"><hr style="padding:0;margin:0;" /></DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton SubmitFormOnClick="true" Text="Simpan" />
                    <DxButton Click="@(() => Grid.CancelEditAsync())" Text="Batal" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
        <CustomValidators>
            <MyCustomValidator DataItemValidating="ValidateGridData" />
        </CustomValidators>
    </DxGrid>


    <DxPopup @bind-Visible="@ConfirmationShown" HeaderText="Hapus rekod" Width="auto" CloseOnOutsideClick="false">
        <BodyContentTemplate>
            <b>@strSelected</b> --> adalah rekod yang dipilih untuk dihapuskan.
            <br />Anda pasti untuk menghapuskan rekod ini?
            <br /><br />
            <div class="confirm-dialog-buttons">
                <DxButton Text="Ya" RenderStyle="ButtonRenderStyle.Primary" Click="@OnYesButtonClick" />
                <DxButton Text="Tidak" RenderStyle="ButtonRenderStyle.Secondary" Click="@OnNoButtonClick" />
            </div>
        </BodyContentTemplate>
    </DxPopup>
</div>
@code {

    private List<patrol_info> _lstPatrollings = new List<patrol_info>();
    int ActiveTabIndex;

    IGrid Grid { get; set; }
    int GridPageIndex { get; set; } = 0;
    string GridSearchText = "";

    bool ConfirmationShown { get; set; } = false;
    string strSelected { get; set; }
    int intSelected { get; set; }
    patrol_info dtData { get; set; }

    GridColumnResizeMode ColumnResizeMode { get; set; } = GridColumnResizeMode.ColumnsContainer;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    private DateTime? patrolStartDtm = DateTime.Now;
    private DateTime? patrolEndDtm = DateTime.Now;

    IEnumerable<patrol_scheduler> dtOfficerName { get; set; }
    IEnumerable<patrol_scheduler> dtLocation { get; set; }

    string ValueOfficerName { get; set; } = null;
    string ValueLocation { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _lstPatrollings = await _patrolling.GetPatrollingAsync();
        DataLoadedTcs.TrySetResult(true);

        try
        {
            _lstPatrollings = await _patrolling.GetAllPatrolling();
            dtOfficerName = await _patrolling.GetOfficerName();
            dtLocation = await _patrolling.GetPatrolLocation(ValueOfficerName);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading actions: {ex.Message}");
        }
    }        
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.CancelEditAsync();
        }
    }
    void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var _data = (patrol_info)e.EditModel;

        if (_data.patrol_officer_name == null || _data.patrol_officer_name.Trim() == "")
        {
            e.AddError(nameof(_data.patrol_officer_name), "Nama pegawai rondaan tidak sah. Medan perlu diisi.");
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        ReturnViewModel response = new ReturnViewModel();
        bool blnSuccess = false;
        var editModel = e.EditModel as patrol_info;
        try
        {
            if (e.IsNew)
            {
                response = await _patrolling.PostPatrolling(editModel);
                blnSuccess = true;
            }
            else
            {
                response = await _patrolling.PutPatrolling(editModel.patrol_id, editModel);
                blnSuccess = true;
            }

            if (blnSuccess)
            {
                await UpdateDataAsync();
                toastService.ShowInfo("Proses kemaskini selesai.");
            }
            else
            {
                toastService.ShowError("Ralat telah berlaku! Sila hubungi pentadbir sistem.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving the edit model: {ex.Message}");
        }
    }
    async Task UpdateDataAsync()
    {
        _lstPatrollings = await _patrolling.RefreshListPatrolling();
    }
    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }
    async Task Delete(patrol_info item)
    {
        strSelected = item.patrol_status;
        intSelected = item.patrol_id;
        dtData = item;
        ConfirmationShown = true;
    }
    async void OnYesButtonClick()
    {
        try
        {
            ReturnViewModel response = new ReturnViewModel();
            response = await _patrolling.DeletePatrolling(dtData.patrol_id);

            if (response.ReturnCode == 200)
            {
                await UpdateDataAsync();
                ConfirmationShown = false;
                StateHasChanged();
                HandleResponse(response.ReturnMessage);
            }
            else
            {
                ConfirmationShown = false;
                HandleResponse(response.ReturnMessage, "Error");
            }
        }
        catch (Exception ex)
        {
        }
        dtData = null;
    }
    void OnNoButtonClick()
    {
        ConfirmationShown = false;
    }
    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e)
    {
        if (e.Item.Name == "Custom")
            e.DisplayText = string.Format("Bil. : {0}", e.Value);
    }
    public MarkupString GetStatusPatrollingIconHtml(string status)
    {
        string priorytyClass = "";
        string title = "";

        if (status == "Aktif")
        {
            priorytyClass = "info";
            title = " AKTIF ";
        }
        else if (status == "Tidak Aktif")
        {
            priorytyClass = "danger";
            title = " TIDAK AKTIF ";
        }

        string html = string.Format("<span class='badge priority-{0} py-1 px-2' title='{1}'>{1}</span>", priorytyClass,
        title);
        return new MarkupString(html);
    }
    public MarkupString CombineText(string strStatus, string strNama)
    {
        string html = string.Format("{0} <br/> {1}", strStatus, strNama.ToUpper());
        return new MarkupString(html);
    }
    private List<string> patrollingStatusOptions = new List<string>
    {
        "Baru",
        "Dalam Rondaan",
        "Selesai"
    };    
    void OnActiveTabIndexChanged(int index)
    {
        ActiveTabIndex = index;
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (patrol_info)e.DataItem;
        var editModel = e.EditModel as patrol_info;

        if (dataItem == null)
            e.EditModel = new patrol_info
                {
                    patrol_start_dtm = DateTime.Now,
                    patrol_end_dtm = DateTime.Now,
                };
        else
        {
            e.EditModel = new patrol_info
                {
                    patrol_id = dataItem.patrol_id,
                    patrol_officer_name = dataItem.patrol_officer_name,
                    patrol_location = dataItem.patrol_location,
                    patrol_start_dtm = dataItem.patrol_start_dtm,
                    patrol_end_dtm = dataItem.patrol_end_dtm,
                    patrol_status = dataItem.patrol_status,
                };
        }
    }
    private void HandleResponse(string message, string? status = "Success")
    {
        var RenderStyle = ToastRenderStyle.Success;

        if (status == "Error")
        {
            RenderStyle = ToastRenderStyle.Danger;
        }
        else if (status == "Info")
        {
            RenderStyle = ToastRenderStyle.Info;
        }
        else if (status == "Warning")
        {
            RenderStyle = ToastRenderStyle.Warning;
        }

        ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = RenderStyle,
                Title = message
            });
    }
    async Task OnOfficerNameChanged()
    {
        dtLocation = await _patrolling.GetPatrolLocation(ValueOfficerName);
    }
}
