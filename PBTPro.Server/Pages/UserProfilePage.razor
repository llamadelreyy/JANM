@page "/user_profile"
@attribute [AllowAnonymous]

@using PBTPro.DAL.Models.PayLoads
@using PBTPro.DAL.Services
@using PBTPro.Data
@using PBTPro.DAL.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components

@inject UserProfileService _UserProfileService
@inject DepartmentService _DepartmentService
@inject SectionService _SectionService
@inject UnitService _UnitService
@inject UserRoleService _UserRoleService
@inject PBTAuthStateProvider _PBTAuthStateProvider
@inject NavigationManager NavigationManager
@inject FileUrlStorageService _fileUrlStorageService


<DxLoadingPanel @bind-Visible="PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Capaian Data...">


<div class="d-lg-flex border-bottom">
    <div class="col-md-12 py-1 dx-helptitle pageTitle">
        <img class="imgTitle" src="/images/icons-small/card-address.png" />
        <div class="textTitle">Profail Pengguna</div>
    </div>
</div>

<div class="item-container-y">
    <div class="ProfileBox" style="border:solid 1px #999;border-radius: 5px;box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.25);">
        <div class="card-body">
            <EditForm Model="@userInfo" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" Context="EditFormContext">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem ColSpanMd="2">
                        <div class="align-items-center align-content-center">
                            @* <img class="profile-photo" src="images/profile/avatar-user-profile-icon.jpg" alt="" /> *@
                            <img class="profile-photo" src="@userInfo.photo_path_url" alt="@userInfo.photo_filename" />
                        </div>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="10">
                        <div class="upload-container">
                            <div style="@(SelectedFilesCount > 0 ? "display: none" : string.Empty)">
                                <span class="drop-file-label mb-1">Tekan butang Pilih untuk pilih fail imej</span>
                            </div>
                            <div class="bottom-upload">
                            <DxUpload Name="ImageUpload"
                                      MaxFileSize="4000000"
                                      SelectButtonText="Pilih fail imej"
                                      AllowMultiFileUpload="false"
                                          FileUploaded="@((args) => OnFileUploaded(args, userInfo))"
                                              ChunkSize="20000"
                                      AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png" })"
                                      UploadUrl="@GetUploadUrl("api/Upload/UploadFile/")"
                                      SelectedFilesChanged="@SelectedFilesChanged">
                            </DxUpload>
                            </div>
                        </div>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="4">
                        <div>Jabatan</div>
                        <DxTextBox @bind-Text="@userInfo.dept_name"
                                   NullText="Jabatan pengguna ..."
                                   BindValueMode="BindValueMode.OnInput"
                                   CssClass="cw-480"
                                   Enabled="false" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="4">
                        <div>Section</div>
                        <DxTextBox @bind-Text="@userInfo.div_name"
                                   NullText="Seksyen pengguna ..."
                                   BindValueMode="BindValueMode.OnInput"
                                   CssClass="cw-480"
                                   Enabled="false" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="4">
                        <div>Unit</div>
                        <DxTextBox @bind-Text="@userInfo.unit_name"
                                   NullText="Unit pengguna ..."
                                   BindValueMode="BindValueMode.OnInput"
                                   CssClass="cw-480"
                                   Enabled="false" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="4">
                        <div>No Kad Pengenalan</div>
                        <DxTextBox @bind-Text="@userInfo.idno"
                                   NullText="cth:750727085221 ..."
                                   BindValueMode="BindValueMode.OnInput"
                                   CssClass="cw-480"
                                   Enabled="false" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="4">
                        <div>No Telefon</div>
                        <DxMaskedInput @bind-Value="@userInfo.phone_number"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       BindValueMode="BindValueMode.OnInput"
                                       Maxlength="14"
                                       ShowValidationIcon="true"
                                       CssClass="cw-480" style="width:170px"
                                       MaskMode=MaskMode.Text
                                       Mask="99999999999999">
                                <DxTextMaskProperties SaveLiteral=false></DxTextMaskProperties>
                        </DxMaskedInput>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="4"></DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="4">
                        <div>ID Pengguna</div>
                        <DxTextBox 
                                   NullText="ID Pengguna ..."
                                   @bind-Text="@userInfo.user_name"
                                   BindValueMode="BindValueMode.OnInput"
                                   CssClass="cw-480"
                                   Enabled="false" />
                    </DxFormLayoutItem>
                    
                    <DxFormLayoutItem ColSpanMd="4">
                        <div>Peranan</div>
                        <DxComboBox Data="@userInfo.user_roles"
                                    NullText="Pilih peranan ..."
                                    ShowValidationIcon="true"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    @bind-Value="@intCurrentRoleId"
                                    TextFieldName="Name"
                                    ValueFieldName="Id"
                                    CssClass="cw-480">
                            </DxComboBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="4"></DxFormLayoutItem>
                   

                    <DxFormLayoutItem ColSpanMd="6">
                        <div>Nama</div>
                        <DxTextBox @bind-Text="@userInfo.full_name"
                                   NullText="Nama Pengguna ..."
                                   BindValueMode="BindValueMode.OnInput"
                                   ShowValidationIcon="true"
                                   CssClass="cw-480"
                                   Enabled="false" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="6">
                        <div>Emel</div>

                        <DxMaskedInput @bind-Value="@userInfo.email"
                                       CssClass="cw-320"
                                       NullText="@("_@_.__")"
                                       Mask="@(@"((\w|[.-])+@(\w|-)+\.(\w|-){2,4})?")"
                                       Maxlength="60"
                                       ShowValidationIcon="true"
                                       MaskMode="MaskMode.RegEx">
                            <DxRegExMaskProperties MaskAutoCompleteMode="@((MaskAutoCompleteMode)AutoCompleteMode)"
                                                   Placeholder="Placeholder"
                                                   PlaceholdersVisible="PlaceholderVisible" />
                        </DxMaskedInput>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12"><hr /></DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12">
                        <DxButton CssClass="w-100 normal-btn" Text="Simpan"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  Enabled="true"
                                  SubmitFormOnClick="true">
                        </DxButton>
                    </DxFormLayoutItem>
                        <MyCustomValidator DataItemValidating="ValidateData" />
                </DxFormLayout>
                <div class="row w-100 mx-0">
                    <p class="demo-text col-12 mt-2">
                        Pengesahan Maklumat :
                        <b>@FormValidationState</b>
                    </p>
                </div>
            </EditForm>
        </div>
    </div>
</div>
</DxLoadingPanel>

@code {
    bool PanelVisible { get; set; }
    [Inject] IToastNotificationService ToastService { get; set; }
    user_profile_view userInfo = new user_profile_view();

    //Get current user id
    // string strPhotoPath { get; set; } = "images/profile/avatar-user-profile-icon.jpg";
    // int intCurrentUserId { get; set; } = 0;
    int intCurrentRoleId { get; set; } = 0;
    int intCurrentSelectedRoleId { get; set; } = 0;
    string FormValidationState = @"Sila tekan butang ""Simpan"" untuk sahkan data.";

    IEnumerable<char> PredefinedPlaceholders { get; set; } = new List<char>() { '_', '#' };
    // string EmailMask { get; set; } = @"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*";

    MaskAutoCompleteMode AutoCompleteMode { get; set; } = MaskAutoCompleteMode.Strong;
    char Placeholder { get; set; } = '_';
    bool PlaceholderVisible { get; set; } = true;

    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    //============== Upload file ===============//
    int SelectedFilesCount { get; set; }
    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);
    }

    protected string GetUploadUrl(string url)
    {
        return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }

    protected void OnFileUploaded(FileUploadEventArgs args, user_profile_view item)
    {
        var fileUrl = _fileUrlStorageService.Get(Guid.Parse(args.FileInfo.Guid));
        item.photo_path_url = fileUrl;
    }
    //================ ** ==================//

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        // intCurrentUserId = _PBTAuthStateProvider.CurrentUser.Userid;
        userInfo = await _UserProfileService.Retrieve();

        List<user_profile_role> user_roles = userInfo.user_roles;

        //Get the current role if user has more than 1 role
        int intRoleId = 0;
        foreach (var item in user_roles)
        {
            if (item.IsDefaultRole)
                intCurrentRoleId = item.Id;


            if (intRoleId > item.Id)
                intRoleId = item.Id;
            else if (intRoleId == 0)
                intRoleId = item.Id;
        }

        //If default role is not set than get the lowest role id to be the default role
        if (intCurrentRoleId == 0)
            intCurrentRoleId = intRoleId;

        //Hold the current selected role
        intCurrentSelectedRoleId = intCurrentRoleId;

        DataLoadedTcs.TrySetResult(true);
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
        }
    }

    void ValidateData(ValidationMessageStoreEventArgs e)
    {
        var _data = (user_profile_view)e.EditModel;
        if (_data.full_name == null || _data.full_name.Trim() == "")
        {
            e.AddError(nameof(_data.full_name), "Medan Nama pengguna perlu diisi.");
        }

        if (_data.phone_number == null || _data.phone_number.Trim() == "")
        {
            e.AddError(nameof(_data.phone_number), "Medan No Telefon perlu diisi.");
        }

        if (_data.email == null || _data.email.Trim() == "")
        {
            e.AddError(nameof(_data.email), "Medan emel perlu diisi.");
        }

        if (intCurrentRoleId == 0)
        {
            e.AddError(nameof(_data.dept_id), "Sila pilih Peranan dari senarai.");
        }

    }


    public async Task HandleValidSubmit()
    {

        FormValidationState = @"Maklumat yang dimasukkan sah.";
        ReturnViewModel response = new ReturnViewModel();
        update_profile_input_model user_info_update = new update_profile_input_model();

        //Assign the updated value to new model
        user_info_update.idno = userInfo.idno;
        user_info_update.user_id = userInfo.user_id;
        user_info_update.user_name = userInfo.user_name;
        user_info_update.sign_path_url = userInfo.sign_path_url;
        user_info_update.sign_filename = userInfo.sign_filename;
        user_info_update.div_id = userInfo.div_id;
        user_info_update.dept_id = userInfo.dept_id;
        user_info_update.unit_id = userInfo.unit_id;
        user_info_update.email = userInfo.email;
        user_info_update.full_name = userInfo.full_name;
        user_info_update.phone_number = userInfo.phone_number;
        user_info_update.photo_filename = (userInfo.photo_path_url.Trim() != "" ? Path.GetFileName(userInfo.photo_path_url) : "") ;
        user_info_update.selected_role = intCurrentRoleId;
        user_info_update.photo_path_url = userInfo.photo_path_url;

        response = await _UserProfileService.UpdateProfile(user_info_update);

        if (response.ReturnCode == 200)
        {
            ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
                Title = "Proses kemaskini katalaluan selesai."
            });

            //If user changed current role than redirect user to login again
            //if (intCurrentSelectedRoleId != intCurrentRoleId)
            //{
                await _PBTAuthStateProvider.LogoutAsync();

                //You actually need to NavigateTo your current Uri with force load. I use simple extension method for this
                NavigationManager.NavigateTo("login", true);
            //}
        }
        else
        {

            ToastService.ShowToast(new ToastOptions()
            {
                ProviderName = "Overview",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Danger,
                Title = "Ralat telah berlaku! Sila hubungi pentadbir sistem."
            });
        }
    }

    void HandleInvalidSubmit()
    {
        FormValidationState = @"Maklumat yang dimasukkan tidak sah!";
    }

}
